ARM GAS  /tmp/ccC6cqRO.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB73:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2019 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  32:Src/main.c    ****   *    this license. 
ARM GAS  /tmp/ccC6cqRO.s 			page 2


  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f1xx_hal.h"
  52:Src/main.c    **** #include "cmsis_os.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END Includes */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  59:Src/main.c    **** CAN_HandleTypeDef hcan;
  60:Src/main.c    **** 
  61:Src/main.c    **** UART_HandleTypeDef huart1;
  62:Src/main.c    **** 
  63:Src/main.c    **** osThreadId Task0Handle;
  64:Src/main.c    **** osThreadId Task1Handle;
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE BEGIN PV */
  67:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  68:Src/main.c    **** CAN_FilterConfTypeDef  sFliterConfig;
  69:Src/main.c    **** CanTxMsgTypeDef TxMessage;
  70:Src/main.c    **** CanRxMsgTypeDef RxMessage;
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** static void MX_GPIO_Init(void);
  77:Src/main.c    **** static void MX_CAN_Init(void);
  78:Src/main.c    **** static void MX_USART1_UART_Init(void);
  79:Src/main.c    **** void Func_Task0(void const * argument);
  80:Src/main.c    **** void Func_Task1(void const * argument);
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE BEGIN PFP */
  83:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  84:Src/main.c    **** 
  85:Src/main.c    **** /* USER CODE END PFP */
  86:Src/main.c    **** 
  87:Src/main.c    **** /* USER CODE BEGIN 0 */
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END 0 */
ARM GAS  /tmp/ccC6cqRO.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    **** /**
  92:Src/main.c    ****   * @brief  The application entry point.
  93:Src/main.c    ****   *
  94:Src/main.c    ****   * @retval None
  95:Src/main.c    ****   */
  96:Src/main.c    **** int main(void)
  97:Src/main.c    **** {
  98:Src/main.c    ****   /* USER CODE BEGIN 1 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* USER CODE END 1 */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 105:Src/main.c    ****   HAL_Init();
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE BEGIN Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* USER CODE END Init */
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* Configure the system clock */
 112:Src/main.c    ****   SystemClock_Config();
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE END SysInit */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* Initialize all configured peripherals */
 119:Src/main.c    ****   MX_GPIO_Init();
 120:Src/main.c    ****   MX_CAN_Init();
 121:Src/main.c    ****   MX_USART1_UART_Init();
 122:Src/main.c    ****   /* USER CODE BEGIN 2 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* USER CODE END 2 */
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 127:Src/main.c    ****   /* add mutexes, ... */
 128:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 131:Src/main.c    ****   /* add semaphores, ... */
 132:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 135:Src/main.c    ****   /* start timers, add new ones, ... */
 136:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* Create the thread(s) */
 139:Src/main.c    ****   /* definition and creation of Task0 */
 140:Src/main.c    ****   osThreadDef(Task0, Func_Task0, osPriorityNormal, 0, 256);
 141:Src/main.c    ****   Task0Handle = osThreadCreate(osThread(Task0), NULL);
 142:Src/main.c    **** 
 143:Src/main.c    ****   /* definition and creation of Task1 */
 144:Src/main.c    ****   osThreadDef(Task1, Func_Task1, osPriorityNormal, 0, 256);
 145:Src/main.c    ****   Task1Handle = osThreadCreate(osThread(Task1), NULL);
 146:Src/main.c    **** 
ARM GAS  /tmp/ccC6cqRO.s 			page 4


 147:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 148:Src/main.c    ****   /* add threads, ... */
 149:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 152:Src/main.c    ****   /* add queues, ... */
 153:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 154:Src/main.c    ****  
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* Start scheduler */
 157:Src/main.c    ****   osKernelStart();
 158:Src/main.c    ****   
 159:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 160:Src/main.c    **** 
 161:Src/main.c    ****   /* Infinite loop */
 162:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 163:Src/main.c    ****   while (1)
 164:Src/main.c    ****   {
 165:Src/main.c    **** 
 166:Src/main.c    ****   /* USER CODE END WHILE */
 167:Src/main.c    **** 
 168:Src/main.c    ****   /* USER CODE BEGIN 3 */
 169:Src/main.c    **** 
 170:Src/main.c    ****   }
 171:Src/main.c    ****   /* USER CODE END 3 */
 172:Src/main.c    **** 
 173:Src/main.c    **** }
 174:Src/main.c    **** 
 175:Src/main.c    **** /**
 176:Src/main.c    ****   * @brief System Clock Configuration
 177:Src/main.c    ****   * @retval None
 178:Src/main.c    ****   */
 179:Src/main.c    **** void SystemClock_Config(void)
 180:Src/main.c    **** {
 181:Src/main.c    **** 
 182:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 183:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 184:Src/main.c    **** 
 185:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 186:Src/main.c    ****     */
 187:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 188:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 189:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 190:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 194:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 195:Src/main.c    ****   {
 196:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 197:Src/main.c    ****   }
 198:Src/main.c    **** 
 199:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 200:Src/main.c    ****     */
 201:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 202:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 203:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
ARM GAS  /tmp/ccC6cqRO.s 			page 5


 204:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 205:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 206:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 207:Src/main.c    **** 
 208:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 209:Src/main.c    ****   {
 210:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 211:Src/main.c    ****   }
 212:Src/main.c    **** 
 213:Src/main.c    ****     /**Configure the Systick interrupt time 
 214:Src/main.c    ****     */
 215:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 216:Src/main.c    **** 
 217:Src/main.c    ****     /**Configure the Systick 
 218:Src/main.c    ****     */
 219:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 220:Src/main.c    **** 
 221:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 222:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 223:Src/main.c    **** }
 224:Src/main.c    **** 
 225:Src/main.c    **** /* CAN init function */
 226:Src/main.c    **** static void MX_CAN_Init(void)
 227:Src/main.c    **** {
 228:Src/main.c    **** 
 229:Src/main.c    ****   hcan.Instance = CAN1;
 230:Src/main.c    ****   hcan.Init.Prescaler = 18;
 231:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 232:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 233:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_7TQ;
 234:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_8TQ;
 235:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 236:Src/main.c    ****   hcan.Init.ABOM = DISABLE;
 237:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 238:Src/main.c    ****   hcan.Init.NART = DISABLE;
 239:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 240:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 241:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 242:Src/main.c    ****   {
 243:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 244:Src/main.c    ****   }
 245:Src/main.c    **** 
 246:Src/main.c    **** }
 247:Src/main.c    **** 
 248:Src/main.c    **** /* USART1 init function */
 249:Src/main.c    **** static void MX_USART1_UART_Init(void)
 250:Src/main.c    **** {
 251:Src/main.c    **** 
 252:Src/main.c    ****   huart1.Instance = USART1;
 253:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 254:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 255:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 256:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 257:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 258:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 259:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 260:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
ARM GAS  /tmp/ccC6cqRO.s 			page 6


 261:Src/main.c    ****   {
 262:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 263:Src/main.c    ****   }
 264:Src/main.c    **** 
 265:Src/main.c    **** }
 266:Src/main.c    **** 
 267:Src/main.c    **** /** Configure pins as 
 268:Src/main.c    ****         * Analog 
 269:Src/main.c    ****         * Input 
 270:Src/main.c    ****         * Output
 271:Src/main.c    ****         * EVENT_OUT
 272:Src/main.c    ****         * EXTI
 273:Src/main.c    **** */
 274:Src/main.c    **** static void MX_GPIO_Init(void)
 275:Src/main.c    **** {
  27              		.loc 1 275 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 88B0     		sub	sp, sp, #32
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 40
  39              	.LBB2:
 276:Src/main.c    **** 
 277:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 278:Src/main.c    **** 
 279:Src/main.c    ****   /* GPIO Ports Clock Enable */
 280:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  40              		.loc 1 280 0
  41 0004 174B     		ldr	r3, .L3
  42 0006 9A69     		ldr	r2, [r3, #24]
  43 0008 42F01002 		orr	r2, r2, #16
  44 000c 9A61     		str	r2, [r3, #24]
  45 000e 9A69     		ldr	r2, [r3, #24]
  46 0010 02F01002 		and	r2, r2, #16
  47 0014 0192     		str	r2, [sp, #4]
  48 0016 019A     		ldr	r2, [sp, #4]
  49              	.LBE2:
  50              	.LBB3:
 281:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  51              		.loc 1 281 0
  52 0018 9A69     		ldr	r2, [r3, #24]
  53 001a 42F00402 		orr	r2, r2, #4
  54 001e 9A61     		str	r2, [r3, #24]
  55 0020 9A69     		ldr	r2, [r3, #24]
  56 0022 02F00402 		and	r2, r2, #4
  57 0026 0292     		str	r2, [sp, #8]
  58 0028 029A     		ldr	r2, [sp, #8]
  59              	.LBE3:
  60              	.LBB4:
 282:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  61              		.loc 1 282 0
ARM GAS  /tmp/ccC6cqRO.s 			page 7


  62 002a 9A69     		ldr	r2, [r3, #24]
  63 002c 42F00802 		orr	r2, r2, #8
  64 0030 9A61     		str	r2, [r3, #24]
  65 0032 9B69     		ldr	r3, [r3, #24]
  66 0034 03F00803 		and	r3, r3, #8
  67 0038 0393     		str	r3, [sp, #12]
  68 003a 039B     		ldr	r3, [sp, #12]
  69              	.LBE4:
 283:Src/main.c    **** 
 284:Src/main.c    ****   /*Configure GPIO pin Output Level */
 285:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
  70              		.loc 1 285 0
  71 003c 0A4C     		ldr	r4, .L3+4
  72 003e 0022     		movs	r2, #0
  73 0040 3821     		movs	r1, #56
  74 0042 2046     		mov	r0, r4
  75 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
  76              	.LVL0:
 286:Src/main.c    **** 
 287:Src/main.c    ****   /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
 288:Src/main.c    ****   GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
  77              		.loc 1 288 0
  78 0048 3823     		movs	r3, #56
  79 004a 0493     		str	r3, [sp, #16]
 289:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  80              		.loc 1 289 0
  81 004c 0123     		movs	r3, #1
  82 004e 0593     		str	r3, [sp, #20]
 290:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  83              		.loc 1 290 0
  84 0050 0023     		movs	r3, #0
  85 0052 0693     		str	r3, [sp, #24]
 291:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  86              		.loc 1 291 0
  87 0054 0223     		movs	r3, #2
  88 0056 0793     		str	r3, [sp, #28]
 292:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  89              		.loc 1 292 0
  90 0058 04A9     		add	r1, sp, #16
  91 005a 2046     		mov	r0, r4
  92 005c FFF7FEFF 		bl	HAL_GPIO_Init
  93              	.LVL1:
 293:Src/main.c    **** 
 294:Src/main.c    **** }
  94              		.loc 1 294 0
  95 0060 08B0     		add	sp, sp, #32
  96              	.LCFI2:
  97              		.cfi_def_cfa_offset 8
  98              		@ sp needed
  99 0062 10BD     		pop	{r4, pc}
 100              	.L4:
 101              		.align	2
 102              	.L3:
 103 0064 00100240 		.word	1073876992
 104 0068 00100140 		.word	1073811456
 105              		.cfi_endproc
 106              	.LFE73:
ARM GAS  /tmp/ccC6cqRO.s 			page 8


 108              		.section	.text.Func_Task0,"ax",%progbits
 109              		.align	2
 110              		.global	Func_Task0
 111              		.thumb
 112              		.thumb_func
 114              	Func_Task0:
 115              	.LFB74:
 295:Src/main.c    **** 
 296:Src/main.c    **** /* USER CODE BEGIN 4 */
 297:Src/main.c    **** 
 298:Src/main.c    **** /* USER CODE END 4 */
 299:Src/main.c    **** 
 300:Src/main.c    **** /* Func_Task0 function */
 301:Src/main.c    **** void Func_Task0(void const * argument)
 302:Src/main.c    **** {
 116              		.loc 1 302 0
 117              		.cfi_startproc
 118              		@ Volatile: function does not return.
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL2:
 122 0000 08B5     		push	{r3, lr}
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 3, -8
 126              		.cfi_offset 14, -4
 303:Src/main.c    **** 
 304:Src/main.c    ****   /* USER CODE BEGIN 5 */
 305:Src/main.c    ****   hcan.pTxMsg = &TxMessage;    // hc.pTxMsg 按 TxMessage格式
 127              		.loc 1 305 0
 128 0002 1E4C     		ldr	r4, .L8
 129 0004 1E4B     		ldr	r3, .L8+4
 130 0006 2363     		str	r3, [r4, #48]
 306:Src/main.c    ****   
 307:Src/main.c    ****   HAL_UART_Transmit(&huart1,"\r\nFunc_Task0\r\n",14,10);
 131              		.loc 1 307 0
 132 0008 0A23     		movs	r3, #10
 133 000a 0E22     		movs	r2, #14
 134 000c 1D49     		ldr	r1, .L8+8
 135 000e 1E48     		ldr	r0, .L8+12
 136              	.LVL3:
 137 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 138              	.LVL4:
 308:Src/main.c    ****   
 309:Src/main.c    ****   
 310:Src/main.c    ****   hcan.pTxMsg -> ExtId = 0x1314;
 139              		.loc 1 310 0
 140 0014 236B     		ldr	r3, [r4, #48]
 141 0016 41F21432 		movw	r2, #4884
 142 001a 5A60     		str	r2, [r3, #4]
 311:Src/main.c    ****   hcan.pTxMsg -> RTR = CAN_RTR_DATA;
 143              		.loc 1 311 0
 144 001c 236B     		ldr	r3, [r4, #48]
 145 001e 0022     		movs	r2, #0
 146 0020 DA60     		str	r2, [r3, #12]
 312:Src/main.c    ****   hcan.pTxMsg -> IDE = CAN_ID_EXT;
 147              		.loc 1 312 0
ARM GAS  /tmp/ccC6cqRO.s 			page 9


 148 0022 236B     		ldr	r3, [r4, #48]
 149 0024 0422     		movs	r2, #4
 150 0026 9A60     		str	r2, [r3, #8]
 313:Src/main.c    ****   hcan.pTxMsg -> DLC = 2;
 151              		.loc 1 313 0
 152 0028 236B     		ldr	r3, [r4, #48]
 153 002a 0222     		movs	r2, #2
 154 002c 1A61     		str	r2, [r3, #16]
 314:Src/main.c    ****   hcan.pTxMsg -> Data[0] = 0xAB;
 155              		.loc 1 314 0
 156 002e 236B     		ldr	r3, [r4, #48]
 157 0030 AB22     		movs	r2, #171
 158 0032 1A75     		strb	r2, [r3, #20]
 315:Src/main.c    ****   hcan.pTxMsg -> Data[1] = 0xCD;
 159              		.loc 1 315 0
 160 0034 236B     		ldr	r3, [r4, #48]
 161 0036 CD22     		movs	r2, #205
 162 0038 5A75     		strb	r2, [r3, #21]
 316:Src/main.c    **** 
 317:Src/main.c    ****   HAL_CAN_Transmit(&hcan, 10);  // 注意第二个参数是timeout，与常规库函数不同
 163              		.loc 1 317 0
 164 003a 0A21     		movs	r1, #10
 165 003c 2046     		mov	r0, r4
 166 003e FFF7FEFF 		bl	HAL_CAN_Transmit
 167              	.LVL5:
 168              	.L6:
 318:Src/main.c    ****   /* Infinite loop */
 319:Src/main.c    ****   for(;;)
 320:Src/main.c    ****   {
 321:Src/main.c    ****     osDelay(1000);
 169              		.loc 1 321 0 discriminator 1
 170 0042 4FF47A70 		mov	r0, #1000
 171 0046 FFF7FEFF 		bl	osDelay
 172              	.LVL6:
 322:Src/main.c    ****     HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 173              		.loc 1 322 0 discriminator 1
 174 004a 104D     		ldr	r5, .L8+16
 175 004c 0022     		movs	r2, #0
 176 004e 0821     		movs	r1, #8
 177 0050 2846     		mov	r0, r5
 178 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 179              	.LVL7:
 323:Src/main.c    ****     HAL_CAN_Transmit(&hcan, 10);
 180              		.loc 1 323 0 discriminator 1
 181 0056 094C     		ldr	r4, .L8
 182 0058 0A21     		movs	r1, #10
 183 005a 2046     		mov	r0, r4
 184 005c FFF7FEFF 		bl	HAL_CAN_Transmit
 185              	.LVL8:
 324:Src/main.c    **** 
 325:Src/main.c    ****     osDelay(1000);
 186              		.loc 1 325 0 discriminator 1
 187 0060 4FF47A70 		mov	r0, #1000
 188 0064 FFF7FEFF 		bl	osDelay
 189              	.LVL9:
 326:Src/main.c    ****     HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 190              		.loc 1 326 0 discriminator 1
ARM GAS  /tmp/ccC6cqRO.s 			page 10


 191 0068 0122     		movs	r2, #1
 192 006a 0821     		movs	r1, #8
 193 006c 2846     		mov	r0, r5
 194 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 195              	.LVL10:
 327:Src/main.c    ****     HAL_CAN_Transmit(&hcan, 10);
 196              		.loc 1 327 0 discriminator 1
 197 0072 0A21     		movs	r1, #10
 198 0074 2046     		mov	r0, r4
 199 0076 FFF7FEFF 		bl	HAL_CAN_Transmit
 200              	.LVL11:
 201 007a E2E7     		b	.L6
 202              	.L9:
 203              		.align	2
 204              	.L8:
 205 007c 00000000 		.word	hcan
 206 0080 00000000 		.word	TxMessage
 207 0084 00000000 		.word	.LC4
 208 0088 00000000 		.word	huart1
 209 008c 00100140 		.word	1073811456
 210              		.cfi_endproc
 211              	.LFE74:
 213              		.section	.text.Func_Task1,"ax",%progbits
 214              		.align	2
 215              		.global	Func_Task1
 216              		.thumb
 217              		.thumb_func
 219              	Func_Task1:
 220              	.LFB75:
 328:Src/main.c    ****   }
 329:Src/main.c    ****   /* USER CODE END 5 */ 
 330:Src/main.c    **** }
 331:Src/main.c    **** 
 332:Src/main.c    **** /* Func_Task1 function */
 333:Src/main.c    **** void Func_Task1(void const * argument)
 334:Src/main.c    **** {
 221              		.loc 1 334 0
 222              		.cfi_startproc
 223              		@ Volatile: function does not return.
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              	.LVL12:
 227 0000 08B5     		push	{r3, lr}
 228              	.LCFI4:
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 3, -8
 231              		.cfi_offset 14, -4
 232              	.LVL13:
 233              	.L11:
 335:Src/main.c    ****   /* USER CODE BEGIN Func_Task1 */
 336:Src/main.c    ****   /* Infinite loop */
 337:Src/main.c    ****   for(;;)
 338:Src/main.c    ****   {
 339:Src/main.c    ****     osDelay(1);
 234              		.loc 1 339 0 discriminator 1
 235 0002 0120     		movs	r0, #1
 236 0004 FFF7FEFF 		bl	osDelay
ARM GAS  /tmp/ccC6cqRO.s 			page 11


 237              	.LVL14:
 238 0008 FBE7     		b	.L11
 239              		.cfi_endproc
 240              	.LFE75:
 242 000a 00BF     		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 243              		.align	2
 244              		.global	HAL_TIM_PeriodElapsedCallback
 245              		.thumb
 246              		.thumb_func
 248              	HAL_TIM_PeriodElapsedCallback:
 249              	.LFB76:
 340:Src/main.c    ****   }
 341:Src/main.c    ****   /* USER CODE END Func_Task1 */
 342:Src/main.c    **** }
 343:Src/main.c    **** 
 344:Src/main.c    **** /**
 345:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 346:Src/main.c    ****   * @note   This function is called  when TIM4 interrupt took place, inside
 347:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 348:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 349:Src/main.c    ****   * @param  htim : TIM handle
 350:Src/main.c    ****   * @retval None
 351:Src/main.c    ****   */
 352:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 353:Src/main.c    **** {
 250              		.loc 1 353 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              	.LVL15:
 255 0000 08B5     		push	{r3, lr}
 256              	.LCFI5:
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 3, -8
 259              		.cfi_offset 14, -4
 354:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 355:Src/main.c    **** 
 356:Src/main.c    ****   /* USER CODE END Callback 0 */
 357:Src/main.c    ****   if (htim->Instance == TIM4) {
 260              		.loc 1 357 0
 261 0002 0268     		ldr	r2, [r0]
 262 0004 024B     		ldr	r3, .L16
 263 0006 9A42     		cmp	r2, r3
 264 0008 01D1     		bne	.L13
 358:Src/main.c    ****     HAL_IncTick();
 265              		.loc 1 358 0
 266 000a FFF7FEFF 		bl	HAL_IncTick
 267              	.LVL16:
 268              	.L13:
 269 000e 08BD     		pop	{r3, pc}
 270              	.L17:
 271              		.align	2
 272              	.L16:
 273 0010 00080040 		.word	1073743872
 274              		.cfi_endproc
 275              	.LFE76:
 277              		.section	.text._Error_Handler,"ax",%progbits
ARM GAS  /tmp/ccC6cqRO.s 			page 12


 278              		.align	2
 279              		.global	_Error_Handler
 280              		.thumb
 281              		.thumb_func
 283              	_Error_Handler:
 284              	.LFB77:
 359:Src/main.c    ****   }
 360:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 361:Src/main.c    **** 
 362:Src/main.c    ****   /* USER CODE END Callback 1 */
 363:Src/main.c    **** }
 364:Src/main.c    **** 
 365:Src/main.c    **** /**
 366:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 367:Src/main.c    ****   * @param  file: The file name as string.
 368:Src/main.c    ****   * @param  line: The line in file as a number.
 369:Src/main.c    ****   * @retval None
 370:Src/main.c    ****   */
 371:Src/main.c    **** void _Error_Handler(char *file, int line)
 372:Src/main.c    **** {
 285              		.loc 1 372 0
 286              		.cfi_startproc
 287              		@ Volatile: function does not return.
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290              		@ link register save eliminated.
 291              	.LVL17:
 292              	.L19:
 293 0000 FEE7     		b	.L19
 294              		.cfi_endproc
 295              	.LFE77:
 297 0002 00BF     		.section	.text.MX_CAN_Init,"ax",%progbits
 298              		.align	2
 299              		.thumb
 300              		.thumb_func
 302              	MX_CAN_Init:
 303              	.LFB71:
 227:Src/main.c    **** 
 304              		.loc 1 227 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 0
 307              		@ frame_needed = 0, uses_anonymous_args = 0
 227:Src/main.c    **** 
 308              		.loc 1 227 0
 309 0000 08B5     		push	{r3, lr}
 310              	.LCFI6:
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 3, -8
 313              		.cfi_offset 14, -4
 229:Src/main.c    ****   hcan.Init.Prescaler = 18;
 314              		.loc 1 229 0
 315 0002 0E48     		ldr	r0, .L23
 316 0004 0E4B     		ldr	r3, .L23+4
 317 0006 0360     		str	r3, [r0]
 230:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 318              		.loc 1 230 0
 319 0008 1223     		movs	r3, #18
ARM GAS  /tmp/ccC6cqRO.s 			page 13


 320 000a 4360     		str	r3, [r0, #4]
 231:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 321              		.loc 1 231 0
 322 000c 0023     		movs	r3, #0
 323 000e 8360     		str	r3, [r0, #8]
 232:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_7TQ;
 324              		.loc 1 232 0
 325 0010 C360     		str	r3, [r0, #12]
 233:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_8TQ;
 326              		.loc 1 233 0
 327 0012 4FF4C022 		mov	r2, #393216
 328 0016 0261     		str	r2, [r0, #16]
 234:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 329              		.loc 1 234 0
 330 0018 4FF4E002 		mov	r2, #7340032
 331 001c 4261     		str	r2, [r0, #20]
 235:Src/main.c    ****   hcan.Init.ABOM = DISABLE;
 332              		.loc 1 235 0
 333 001e 8361     		str	r3, [r0, #24]
 236:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 334              		.loc 1 236 0
 335 0020 C361     		str	r3, [r0, #28]
 237:Src/main.c    ****   hcan.Init.NART = DISABLE;
 336              		.loc 1 237 0
 337 0022 0362     		str	r3, [r0, #32]
 238:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 338              		.loc 1 238 0
 339 0024 4362     		str	r3, [r0, #36]
 239:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 340              		.loc 1 239 0
 341 0026 8362     		str	r3, [r0, #40]
 240:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 342              		.loc 1 240 0
 343 0028 C362     		str	r3, [r0, #44]
 241:Src/main.c    ****   {
 344              		.loc 1 241 0
 345 002a FFF7FEFF 		bl	HAL_CAN_Init
 346              	.LVL18:
 347 002e 18B1     		cbz	r0, .L20
 243:Src/main.c    ****   }
 348              		.loc 1 243 0
 349 0030 F321     		movs	r1, #243
 350 0032 0448     		ldr	r0, .L23+8
 351 0034 FFF7FEFF 		bl	_Error_Handler
 352              	.LVL19:
 353              	.L20:
 354 0038 08BD     		pop	{r3, pc}
 355              	.L24:
 356 003a 00BF     		.align	2
 357              	.L23:
 358 003c 00000000 		.word	hcan
 359 0040 00640040 		.word	1073767424
 360 0044 10000000 		.word	.LC5
 361              		.cfi_endproc
 362              	.LFE71:
 364              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 365              		.align	2
ARM GAS  /tmp/ccC6cqRO.s 			page 14


 366              		.thumb
 367              		.thumb_func
 369              	MX_USART1_UART_Init:
 370              	.LFB72:
 250:Src/main.c    **** 
 371              		.loc 1 250 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375 0000 08B5     		push	{r3, lr}
 376              	.LCFI7:
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 3, -8
 379              		.cfi_offset 14, -4
 252:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 380              		.loc 1 252 0
 381 0002 0B48     		ldr	r0, .L28
 382 0004 0B4B     		ldr	r3, .L28+4
 383 0006 0360     		str	r3, [r0]
 253:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 384              		.loc 1 253 0
 385 0008 4FF4E133 		mov	r3, #115200
 386 000c 4360     		str	r3, [r0, #4]
 254:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 387              		.loc 1 254 0
 388 000e 0023     		movs	r3, #0
 389 0010 8360     		str	r3, [r0, #8]
 255:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 390              		.loc 1 255 0
 391 0012 C360     		str	r3, [r0, #12]
 256:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 392              		.loc 1 256 0
 393 0014 0361     		str	r3, [r0, #16]
 257:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 394              		.loc 1 257 0
 395 0016 0C22     		movs	r2, #12
 396 0018 4261     		str	r2, [r0, #20]
 258:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 397              		.loc 1 258 0
 398 001a 8361     		str	r3, [r0, #24]
 259:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 399              		.loc 1 259 0
 400 001c C361     		str	r3, [r0, #28]
 260:Src/main.c    ****   {
 401              		.loc 1 260 0
 402 001e FFF7FEFF 		bl	HAL_UART_Init
 403              	.LVL20:
 404 0022 20B1     		cbz	r0, .L25
 262:Src/main.c    ****   }
 405              		.loc 1 262 0
 406 0024 4FF48371 		mov	r1, #262
 407 0028 0348     		ldr	r0, .L28+8
 408 002a FFF7FEFF 		bl	_Error_Handler
 409              	.LVL21:
 410              	.L25:
 411 002e 08BD     		pop	{r3, pc}
 412              	.L29:
ARM GAS  /tmp/ccC6cqRO.s 			page 15


 413              		.align	2
 414              	.L28:
 415 0030 00000000 		.word	huart1
 416 0034 00380140 		.word	1073821696
 417 0038 10000000 		.word	.LC5
 418              		.cfi_endproc
 419              	.LFE72:
 421              		.section	.text.SystemClock_Config,"ax",%progbits
 422              		.align	2
 423              		.global	SystemClock_Config
 424              		.thumb
 425              		.thumb_func
 427              	SystemClock_Config:
 428              	.LFB70:
 180:Src/main.c    **** 
 429              		.loc 1 180 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 64
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433 0000 00B5     		push	{lr}
 434              	.LCFI8:
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 14, -4
 437 0002 91B0     		sub	sp, sp, #68
 438              	.LCFI9:
 439              		.cfi_def_cfa_offset 72
 187:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 440              		.loc 1 187 0
 441 0004 0122     		movs	r2, #1
 442 0006 0692     		str	r2, [sp, #24]
 188:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 443              		.loc 1 188 0
 444 0008 4FF48033 		mov	r3, #65536
 445 000c 0793     		str	r3, [sp, #28]
 189:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 446              		.loc 1 189 0
 447 000e 0021     		movs	r1, #0
 448 0010 0891     		str	r1, [sp, #32]
 190:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 449              		.loc 1 190 0
 450 0012 0A92     		str	r2, [sp, #40]
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 451              		.loc 1 191 0
 452 0014 0222     		movs	r2, #2
 453 0016 0D92     		str	r2, [sp, #52]
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 454              		.loc 1 192 0
 455 0018 0E93     		str	r3, [sp, #56]
 193:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 456              		.loc 1 193 0
 457 001a 4FF4E013 		mov	r3, #1835008
 458 001e 0F93     		str	r3, [sp, #60]
 194:Src/main.c    ****   {
 459              		.loc 1 194 0
 460 0020 06A8     		add	r0, sp, #24
 461 0022 FFF7FEFF 		bl	HAL_RCC_OscConfig
 462              	.LVL22:
ARM GAS  /tmp/ccC6cqRO.s 			page 16


 463 0026 18B1     		cbz	r0, .L31
 196:Src/main.c    ****   }
 464              		.loc 1 196 0
 465 0028 C421     		movs	r1, #196
 466 002a 1448     		ldr	r0, .L34
 467 002c FFF7FEFF 		bl	_Error_Handler
 468              	.LVL23:
 469              	.L31:
 201:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 470              		.loc 1 201 0
 471 0030 0F23     		movs	r3, #15
 472 0032 0193     		str	r3, [sp, #4]
 203:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 473              		.loc 1 203 0
 474 0034 0221     		movs	r1, #2
 475 0036 0291     		str	r1, [sp, #8]
 204:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 476              		.loc 1 204 0
 477 0038 0023     		movs	r3, #0
 478 003a 0393     		str	r3, [sp, #12]
 205:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 479              		.loc 1 205 0
 480 003c 4FF48062 		mov	r2, #1024
 481 0040 0492     		str	r2, [sp, #16]
 206:Src/main.c    **** 
 482              		.loc 1 206 0
 483 0042 0593     		str	r3, [sp, #20]
 208:Src/main.c    ****   {
 484              		.loc 1 208 0
 485 0044 01A8     		add	r0, sp, #4
 486 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 487              	.LVL24:
 488 004a 18B1     		cbz	r0, .L32
 210:Src/main.c    ****   }
 489              		.loc 1 210 0
 490 004c D221     		movs	r1, #210
 491 004e 0B48     		ldr	r0, .L34
 492 0050 FFF7FEFF 		bl	_Error_Handler
 493              	.LVL25:
 494              	.L32:
 215:Src/main.c    **** 
 495              		.loc 1 215 0
 496 0054 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 497              	.LVL26:
 498 0058 094B     		ldr	r3, .L34+4
 499 005a A3FB0030 		umull	r3, r0, r3, r0
 500 005e 8009     		lsrs	r0, r0, #6
 501 0060 FFF7FEFF 		bl	HAL_SYSTICK_Config
 502              	.LVL27:
 219:Src/main.c    **** 
 503              		.loc 1 219 0
 504 0064 0420     		movs	r0, #4
 505 0066 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 506              	.LVL28:
 222:Src/main.c    **** }
 507              		.loc 1 222 0
 508 006a 0022     		movs	r2, #0
ARM GAS  /tmp/ccC6cqRO.s 			page 17


 509 006c 0F21     		movs	r1, #15
 510 006e 4FF0FF30 		mov	r0, #-1
 511 0072 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 512              	.LVL29:
 223:Src/main.c    **** 
 513              		.loc 1 223 0
 514 0076 11B0     		add	sp, sp, #68
 515              	.LCFI10:
 516              		.cfi_def_cfa_offset 4
 517              		@ sp needed
 518 0078 5DF804FB 		ldr	pc, [sp], #4
 519              	.L35:
 520              		.align	2
 521              	.L34:
 522 007c 10000000 		.word	.LC5
 523 0080 D34D6210 		.word	274877907
 524              		.cfi_endproc
 525              	.LFE70:
 527              		.section	.text.main,"ax",%progbits
 528              		.align	2
 529              		.global	main
 530              		.thumb
 531              		.thumb_func
 533              	main:
 534              	.LFB69:
  97:Src/main.c    ****   /* USER CODE BEGIN 1 */
 535              		.loc 1 97 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 40
 538              		@ frame_needed = 0, uses_anonymous_args = 0
 539 0000 70B5     		push	{r4, r5, r6, lr}
 540              	.LCFI11:
 541              		.cfi_def_cfa_offset 16
 542              		.cfi_offset 4, -16
 543              		.cfi_offset 5, -12
 544              		.cfi_offset 6, -8
 545              		.cfi_offset 14, -4
 546 0002 8AB0     		sub	sp, sp, #40
 547              	.LCFI12:
 548              		.cfi_def_cfa_offset 56
 105:Src/main.c    **** 
 549              		.loc 1 105 0
 550 0004 FFF7FEFF 		bl	HAL_Init
 551              	.LVL30:
 112:Src/main.c    **** 
 552              		.loc 1 112 0
 553 0008 FFF7FEFF 		bl	SystemClock_Config
 554              	.LVL31:
 119:Src/main.c    ****   MX_CAN_Init();
 555              		.loc 1 119 0
 556 000c FFF7FEFF 		bl	MX_GPIO_Init
 557              	.LVL32:
 120:Src/main.c    ****   MX_USART1_UART_Init();
 558              		.loc 1 120 0
 559 0010 FFF7FEFF 		bl	MX_CAN_Init
 560              	.LVL33:
 121:Src/main.c    ****   /* USER CODE BEGIN 2 */
ARM GAS  /tmp/ccC6cqRO.s 			page 18


 561              		.loc 1 121 0
 562 0014 FFF7FEFF 		bl	MX_USART1_UART_Init
 563              	.LVL34:
 140:Src/main.c    ****   Task0Handle = osThreadCreate(osThread(Task0), NULL);
 564              		.loc 1 140 0
 565 0018 0D4C     		ldr	r4, .L39
 566 001a 05AD     		add	r5, sp, #20
 567 001c 2646     		mov	r6, r4
 568 001e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 569 0020 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 570 0022 3368     		ldr	r3, [r6]
 571 0024 2B60     		str	r3, [r5]
 141:Src/main.c    **** 
 572              		.loc 1 141 0
 573 0026 0021     		movs	r1, #0
 574 0028 05A8     		add	r0, sp, #20
 575 002a FFF7FEFF 		bl	osThreadCreate
 576              	.LVL35:
 577 002e 094B     		ldr	r3, .L39+4
 578 0030 1860     		str	r0, [r3]
 144:Src/main.c    ****   Task1Handle = osThreadCreate(osThread(Task1), NULL);
 579              		.loc 1 144 0
 580 0032 6D46     		mov	r5, sp
 581 0034 1434     		adds	r4, r4, #20
 582 0036 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 583 0038 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 584 003a 2368     		ldr	r3, [r4]
 585 003c 2B60     		str	r3, [r5]
 145:Src/main.c    **** 
 586              		.loc 1 145 0
 587 003e 0021     		movs	r1, #0
 588 0040 6846     		mov	r0, sp
 589 0042 FFF7FEFF 		bl	osThreadCreate
 590              	.LVL36:
 591 0046 044B     		ldr	r3, .L39+8
 592 0048 1860     		str	r0, [r3]
 157:Src/main.c    ****   
 593              		.loc 1 157 0
 594 004a FFF7FEFF 		bl	osKernelStart
 595              	.LVL37:
 596              	.L37:
 597 004e FEE7     		b	.L37
 598              	.L40:
 599              		.align	2
 600              	.L39:
 601 0050 00000000 		.word	.LANCHOR0
 602 0054 00000000 		.word	Task0Handle
 603 0058 00000000 		.word	Task1Handle
 604              		.cfi_endproc
 605              	.LFE69:
 607              		.comm	RxMessage,36,4
 608              		.comm	TxMessage,28,4
 609              		.comm	sFliterConfig,40,4
 610              		.comm	Task1Handle,4,4
 611              		.comm	Task0Handle,4,4
 612              		.comm	huart1,64,4
 613              		.comm	hcan,68,4
ARM GAS  /tmp/ccC6cqRO.s 			page 19


 614              		.section	.rodata
 615              		.align	2
 616              		.set	.LANCHOR0,. + 0
 617              	.LC6:
 618 0000 24000000 		.word	.LC0
 619 0004 00000000 		.word	Func_Task0
 620 0008 0000     		.short	0
 621 000a 0000     		.space	2
 622 000c 00000000 		.word	0
 623 0010 00010000 		.word	256
 624              	.LC7:
 625 0014 1C000000 		.word	.LC2
 626 0018 00000000 		.word	Func_Task1
 627 001c 0000     		.short	0
 628 001e 0000     		.space	2
 629 0020 00000000 		.word	0
 630 0024 00010000 		.word	256
 631              		.section	.rodata.str1.4,"aMS",%progbits,1
 632              		.align	2
 633              	.LC4:
 634 0000 0D0A4675 		.ascii	"\015\012Func_Task0\015\012\000"
 634      6E635F54 
 634      61736B30 
 634      0D0A00
 635 000f 00       		.space	1
 636              	.LC5:
 637 0010 5372632F 		.ascii	"Src/main.c\000"
 637      6D61696E 
 637      2E6300
 638 001b 00       		.space	1
 639              	.LC2:
 640 001c 5461736B 		.ascii	"Task1\000"
 640      3100
 641 0022 0000     		.space	2
 642              	.LC0:
 643 0024 5461736B 		.ascii	"Task0\000"
 643      3000
 644              		.text
 645              	.Letext0:
 646              		.file 2 "/home/user/Library/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_ty
 647              		.file 3 "/home/user/Library/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 648              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 649              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 650              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 651              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 652              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 653              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 654              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 655              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 656              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can_ex.h"
 657              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 658              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 659              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 660              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 661              		.file 17 "Drivers/CMSIS/Include/core_cm3.h"
 662              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 663              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccC6cqRO.s 			page 20


ARM GAS  /tmp/ccC6cqRO.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccC6cqRO.s:20     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccC6cqRO.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccC6cqRO.s:103    .text.MX_GPIO_Init:00000064 $d
     /tmp/ccC6cqRO.s:109    .text.Func_Task0:00000000 $t
     /tmp/ccC6cqRO.s:114    .text.Func_Task0:00000000 Func_Task0
     /tmp/ccC6cqRO.s:205    .text.Func_Task0:0000007c $d
                            *COM*:00000044 hcan
                            *COM*:0000001c TxMessage
                            *COM*:00000040 huart1
     /tmp/ccC6cqRO.s:214    .text.Func_Task1:00000000 $t
     /tmp/ccC6cqRO.s:219    .text.Func_Task1:00000000 Func_Task1
     /tmp/ccC6cqRO.s:243    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccC6cqRO.s:248    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccC6cqRO.s:273    .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
     /tmp/ccC6cqRO.s:278    .text._Error_Handler:00000000 $t
     /tmp/ccC6cqRO.s:283    .text._Error_Handler:00000000 _Error_Handler
     /tmp/ccC6cqRO.s:298    .text.MX_CAN_Init:00000000 $t
     /tmp/ccC6cqRO.s:302    .text.MX_CAN_Init:00000000 MX_CAN_Init
     /tmp/ccC6cqRO.s:358    .text.MX_CAN_Init:0000003c $d
     /tmp/ccC6cqRO.s:365    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccC6cqRO.s:369    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccC6cqRO.s:415    .text.MX_USART1_UART_Init:00000030 $d
     /tmp/ccC6cqRO.s:422    .text.SystemClock_Config:00000000 $t
     /tmp/ccC6cqRO.s:427    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccC6cqRO.s:522    .text.SystemClock_Config:0000007c $d
     /tmp/ccC6cqRO.s:528    .text.main:00000000 $t
     /tmp/ccC6cqRO.s:533    .text.main:00000000 main
     /tmp/ccC6cqRO.s:601    .text.main:00000050 $d
                            *COM*:00000004 Task0Handle
                            *COM*:00000004 Task1Handle
                            *COM*:00000024 RxMessage
                            *COM*:00000028 sFliterConfig
     /tmp/ccC6cqRO.s:615    .rodata:00000000 $d
     /tmp/ccC6cqRO.s:632    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Transmit
HAL_CAN_Transmit
osDelay
HAL_IncTick
HAL_CAN_Init
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
osThreadCreate
osKernelStart
