ARM GAS  /tmp/cc8wjvyi.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB73:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2019 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  32:Src/main.c    ****   *    this license. 
ARM GAS  /tmp/cc8wjvyi.s 			page 2


  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f1xx_hal.h"
  52:Src/main.c    **** #include "cmsis_os.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END Includes */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  59:Src/main.c    **** CAN_HandleTypeDef hcan;
  60:Src/main.c    **** 
  61:Src/main.c    **** UART_HandleTypeDef huart1;
  62:Src/main.c    **** 
  63:Src/main.c    **** osThreadId Task0Handle;
  64:Src/main.c    **** osThreadId Task1Handle;
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE BEGIN PV */
  67:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  68:Src/main.c    **** CAN_FilterConfTypeDef  sFliterConfig;
  69:Src/main.c    **** CanTxMsgTypeDef TxMessage;
  70:Src/main.c    **** CanRxMsgTypeDef RxMessage;
  71:Src/main.c    **** 
  72:Src/main.c    **** int flag;
  73:Src/main.c    **** /* USER CODE END PV */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void SystemClock_Config(void);
  77:Src/main.c    **** static void MX_GPIO_Init(void);
  78:Src/main.c    **** static void MX_CAN_Init(void);
  79:Src/main.c    **** static void MX_USART1_UART_Init(void);
  80:Src/main.c    **** void Func_Task0(void const * argument);
  81:Src/main.c    **** void Func_Task1(void const * argument);
  82:Src/main.c    **** 
  83:Src/main.c    **** /* USER CODE BEGIN PFP */
  84:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  85:Src/main.c    **** 
  86:Src/main.c    **** /* USER CODE END PFP */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE BEGIN 0 */
  89:Src/main.c    **** 
ARM GAS  /tmp/cc8wjvyi.s 			page 3


  90:Src/main.c    **** /* USER CODE END 0 */
  91:Src/main.c    **** 
  92:Src/main.c    **** /**
  93:Src/main.c    ****   * @brief  The application entry point.
  94:Src/main.c    ****   *
  95:Src/main.c    ****   * @retval None
  96:Src/main.c    ****   */
  97:Src/main.c    **** int main(void)
  98:Src/main.c    **** {
  99:Src/main.c    ****   /* USER CODE BEGIN 1 */
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE END 1 */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 106:Src/main.c    ****   HAL_Init();
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE BEGIN Init */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE END Init */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* Configure the system clock */
 113:Src/main.c    ****   SystemClock_Config();
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* USER CODE END SysInit */
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* Initialize all configured peripherals */
 120:Src/main.c    ****   MX_GPIO_Init();
 121:Src/main.c    ****   MX_CAN_Init();
 122:Src/main.c    ****   MX_USART1_UART_Init();
 123:Src/main.c    ****   /* USER CODE BEGIN 2 */
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE END 2 */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 128:Src/main.c    ****   /* add mutexes, ... */
 129:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 132:Src/main.c    ****   /* add semaphores, ... */
 133:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 136:Src/main.c    ****   /* start timers, add new ones, ... */
 137:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* Create the thread(s) */
 140:Src/main.c    ****   /* definition and creation of Task0 */
 141:Src/main.c    ****   osThreadDef(Task0, Func_Task0, osPriorityNormal, 0, 256);
 142:Src/main.c    ****   Task0Handle = osThreadCreate(osThread(Task0), NULL);
 143:Src/main.c    **** 
 144:Src/main.c    ****   /* definition and creation of Task1 */
 145:Src/main.c    ****   osThreadDef(Task1, Func_Task1, osPriorityNormal, 0, 256);
 146:Src/main.c    ****   Task1Handle = osThreadCreate(osThread(Task1), NULL);
ARM GAS  /tmp/cc8wjvyi.s 			page 4


 147:Src/main.c    **** 
 148:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 149:Src/main.c    ****   /* add threads, ... */
 150:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 153:Src/main.c    ****   /* add queues, ... */
 154:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 155:Src/main.c    ****  
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* Start scheduler */
 158:Src/main.c    ****   osKernelStart();
 159:Src/main.c    ****   
 160:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 161:Src/main.c    **** 
 162:Src/main.c    ****   /* Infinite loop */
 163:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 164:Src/main.c    ****   while (1)
 165:Src/main.c    ****   {
 166:Src/main.c    **** 
 167:Src/main.c    ****   /* USER CODE END WHILE */
 168:Src/main.c    **** 
 169:Src/main.c    ****   /* USER CODE BEGIN 3 */
 170:Src/main.c    **** 
 171:Src/main.c    ****   }
 172:Src/main.c    ****   /* USER CODE END 3 */
 173:Src/main.c    **** 
 174:Src/main.c    **** }
 175:Src/main.c    **** 
 176:Src/main.c    **** /**
 177:Src/main.c    ****   * @brief System Clock Configuration
 178:Src/main.c    ****   * @retval None
 179:Src/main.c    ****   */
 180:Src/main.c    **** void SystemClock_Config(void)
 181:Src/main.c    **** {
 182:Src/main.c    **** 
 183:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 184:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 185:Src/main.c    **** 
 186:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 187:Src/main.c    ****     */
 188:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 189:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 190:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 191:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 195:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 196:Src/main.c    ****   {
 197:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 198:Src/main.c    ****   }
 199:Src/main.c    **** 
 200:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 201:Src/main.c    ****     */
 202:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 203:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/cc8wjvyi.s 			page 5


 204:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 205:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 206:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 207:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 208:Src/main.c    **** 
 209:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 210:Src/main.c    ****   {
 211:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 212:Src/main.c    ****   }
 213:Src/main.c    **** 
 214:Src/main.c    ****     /**Configure the Systick interrupt time 
 215:Src/main.c    ****     */
 216:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 217:Src/main.c    **** 
 218:Src/main.c    ****     /**Configure the Systick 
 219:Src/main.c    ****     */
 220:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 221:Src/main.c    **** 
 222:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 223:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 224:Src/main.c    **** }
 225:Src/main.c    **** 
 226:Src/main.c    **** /* CAN init function */
 227:Src/main.c    **** static void MX_CAN_Init(void)
 228:Src/main.c    **** {
 229:Src/main.c    **** 
 230:Src/main.c    ****   hcan.Instance = CAN1;
 231:Src/main.c    ****   hcan.Init.Prescaler = 18;
 232:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 233:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 234:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_7TQ;
 235:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_8TQ;
 236:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 237:Src/main.c    ****   hcan.Init.ABOM = DISABLE;
 238:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 239:Src/main.c    ****   hcan.Init.NART = DISABLE;
 240:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 241:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 242:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 243:Src/main.c    ****   {
 244:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 245:Src/main.c    ****   }
 246:Src/main.c    **** 
 247:Src/main.c    **** }
 248:Src/main.c    **** 
 249:Src/main.c    **** /* USART1 init function */
 250:Src/main.c    **** static void MX_USART1_UART_Init(void)
 251:Src/main.c    **** {
 252:Src/main.c    **** 
 253:Src/main.c    ****   huart1.Instance = USART1;
 254:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 255:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 256:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 257:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 258:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 259:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 260:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  /tmp/cc8wjvyi.s 			page 6


 261:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 262:Src/main.c    ****   {
 263:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 264:Src/main.c    ****   }
 265:Src/main.c    **** 
 266:Src/main.c    **** }
 267:Src/main.c    **** 
 268:Src/main.c    **** /** Configure pins as 
 269:Src/main.c    ****         * Analog 
 270:Src/main.c    ****         * Input 
 271:Src/main.c    ****         * Output
 272:Src/main.c    ****         * EVENT_OUT
 273:Src/main.c    ****         * EXTI
 274:Src/main.c    **** */
 275:Src/main.c    **** static void MX_GPIO_Init(void)
 276:Src/main.c    **** {
  27              		.loc 1 276 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 88B0     		sub	sp, sp, #32
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 40
  39              	.LBB2:
 277:Src/main.c    **** 
 278:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 279:Src/main.c    **** 
 280:Src/main.c    ****   /* GPIO Ports Clock Enable */
 281:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  40              		.loc 1 281 0
  41 0004 174B     		ldr	r3, .L3
  42 0006 9A69     		ldr	r2, [r3, #24]
  43 0008 42F01002 		orr	r2, r2, #16
  44 000c 9A61     		str	r2, [r3, #24]
  45 000e 9A69     		ldr	r2, [r3, #24]
  46 0010 02F01002 		and	r2, r2, #16
  47 0014 0192     		str	r2, [sp, #4]
  48 0016 019A     		ldr	r2, [sp, #4]
  49              	.LBE2:
  50              	.LBB3:
 282:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  51              		.loc 1 282 0
  52 0018 9A69     		ldr	r2, [r3, #24]
  53 001a 42F00402 		orr	r2, r2, #4
  54 001e 9A61     		str	r2, [r3, #24]
  55 0020 9A69     		ldr	r2, [r3, #24]
  56 0022 02F00402 		and	r2, r2, #4
  57 0026 0292     		str	r2, [sp, #8]
  58 0028 029A     		ldr	r2, [sp, #8]
  59              	.LBE3:
  60              	.LBB4:
 283:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  /tmp/cc8wjvyi.s 			page 7


  61              		.loc 1 283 0
  62 002a 9A69     		ldr	r2, [r3, #24]
  63 002c 42F00802 		orr	r2, r2, #8
  64 0030 9A61     		str	r2, [r3, #24]
  65 0032 9B69     		ldr	r3, [r3, #24]
  66 0034 03F00803 		and	r3, r3, #8
  67 0038 0393     		str	r3, [sp, #12]
  68 003a 039B     		ldr	r3, [sp, #12]
  69              	.LBE4:
 284:Src/main.c    **** 
 285:Src/main.c    ****   /*Configure GPIO pin Output Level */
 286:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
  70              		.loc 1 286 0
  71 003c 0A4C     		ldr	r4, .L3+4
  72 003e 0022     		movs	r2, #0
  73 0040 3821     		movs	r1, #56
  74 0042 2046     		mov	r0, r4
  75 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
  76              	.LVL0:
 287:Src/main.c    **** 
 288:Src/main.c    ****   /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
 289:Src/main.c    ****   GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
  77              		.loc 1 289 0
  78 0048 3823     		movs	r3, #56
  79 004a 0493     		str	r3, [sp, #16]
 290:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  80              		.loc 1 290 0
  81 004c 0123     		movs	r3, #1
  82 004e 0593     		str	r3, [sp, #20]
 291:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  83              		.loc 1 291 0
  84 0050 0023     		movs	r3, #0
  85 0052 0693     		str	r3, [sp, #24]
 292:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  86              		.loc 1 292 0
  87 0054 0223     		movs	r3, #2
  88 0056 0793     		str	r3, [sp, #28]
 293:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  89              		.loc 1 293 0
  90 0058 04A9     		add	r1, sp, #16
  91 005a 2046     		mov	r0, r4
  92 005c FFF7FEFF 		bl	HAL_GPIO_Init
  93              	.LVL1:
 294:Src/main.c    **** 
 295:Src/main.c    **** }
  94              		.loc 1 295 0
  95 0060 08B0     		add	sp, sp, #32
  96              	.LCFI2:
  97              		.cfi_def_cfa_offset 8
  98              		@ sp needed
  99 0062 10BD     		pop	{r4, pc}
 100              	.L4:
 101              		.align	2
 102              	.L3:
 103 0064 00100240 		.word	1073876992
 104 0068 00100140 		.word	1073811456
 105              		.cfi_endproc
ARM GAS  /tmp/cc8wjvyi.s 			page 8


 106              	.LFE73:
 108              		.section	.text.Func_Task0,"ax",%progbits
 109              		.align	2
 110              		.global	Func_Task0
 111              		.thumb
 112              		.thumb_func
 114              	Func_Task0:
 115              	.LFB74:
 296:Src/main.c    **** 
 297:Src/main.c    **** /* USER CODE BEGIN 4 */
 298:Src/main.c    **** 
 299:Src/main.c    **** /* USER CODE END 4 */
 300:Src/main.c    **** 
 301:Src/main.c    **** /* Func_Task0 function */
 302:Src/main.c    **** void Func_Task0(void const * argument)
 303:Src/main.c    **** {
 116              		.loc 1 303 0
 117              		.cfi_startproc
 118              		@ Volatile: function does not return.
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL2:
 122 0000 08B5     		push	{r3, lr}
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 3, -8
 126              		.cfi_offset 14, -4
 304:Src/main.c    **** 
 305:Src/main.c    ****   /* USER CODE BEGIN 5 */
 306:Src/main.c    ****   // hcan.pTxMsg = &TxMessage;    // hc.pTxMsg 按 TxMessage格式
 307:Src/main.c    ****   hcan.pRxMsg = &RxMessage;
 127              		.loc 1 307 0
 128 0002 104D     		ldr	r5, .L8
 129 0004 104B     		ldr	r3, .L8+4
 130 0006 6B63     		str	r3, [r5, #52]
 308:Src/main.c    ****   
 309:Src/main.c    ****   HAL_UART_Transmit(&huart1,"\r\nFunc_Task0\r\n",14,10);
 131              		.loc 1 309 0
 132 0008 0A23     		movs	r3, #10
 133 000a 0E22     		movs	r2, #14
 134 000c 0F49     		ldr	r1, .L8+8
 135 000e 1048     		ldr	r0, .L8+12
 136              	.LVL3:
 137 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 138              	.LVL4:
 310:Src/main.c    ****   
 311:Src/main.c    ****   sFliterConfig.FilterNumber         = 0;
 139              		.loc 1 311 0
 140 0014 0F49     		ldr	r1, .L8+16
 141 0016 0024     		movs	r4, #0
 142 0018 4C61     		str	r4, [r1, #20]
 312:Src/main.c    ****   sFliterConfig.FilterMode           = CAN_FILTERMODE_IDMASK;
 143              		.loc 1 312 0
 144 001a 8C61     		str	r4, [r1, #24]
 313:Src/main.c    ****   sFliterConfig.FilterScale          = CAN_FILTERSCALE_32BIT;
 145              		.loc 1 313 0
 146 001c 0123     		movs	r3, #1
ARM GAS  /tmp/cc8wjvyi.s 			page 9


 147 001e CB61     		str	r3, [r1, #28]
 314:Src/main.c    ****   sFliterConfig.FilterIdHigh         = 0x0000;
 148              		.loc 1 314 0
 149 0020 0C60     		str	r4, [r1]
 315:Src/main.c    ****   sFliterConfig.FilterIdLow          = 0x0000;
 150              		.loc 1 315 0
 151 0022 4C60     		str	r4, [r1, #4]
 316:Src/main.c    ****   sFliterConfig.FilterMaskIdHigh     = 0x0000;
 152              		.loc 1 316 0
 153 0024 8C60     		str	r4, [r1, #8]
 317:Src/main.c    ****   sFliterConfig.FilterMaskIdLow      = 0x0000;
 154              		.loc 1 317 0
 155 0026 CC60     		str	r4, [r1, #12]
 318:Src/main.c    ****   sFliterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 156              		.loc 1 318 0
 157 0028 0C61     		str	r4, [r1, #16]
 319:Src/main.c    ****   sFliterConfig.FilterActivation     = ENABLE;
 158              		.loc 1 319 0
 159 002a 0B62     		str	r3, [r1, #32]
 320:Src/main.c    ****   // sFliterConfig.BankNumber           = 14;
 321:Src/main.c    ****   
 322:Src/main.c    ****   HAL_CAN_ConfigFilter(&hcan, &sFliterConfig);
 160              		.loc 1 322 0
 161 002c 2846     		mov	r0, r5
 162 002e FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 163              	.LVL5:
 323:Src/main.c    **** 
 324:Src/main.c    ****   HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 164              		.loc 1 324 0
 165 0032 2146     		mov	r1, r4
 166 0034 2846     		mov	r0, r5
 167 0036 FFF7FEFF 		bl	HAL_CAN_Receive_IT
 168              	.LVL6:
 169              	.L6:
 325:Src/main.c    **** 
 326:Src/main.c    ****   // hcan.pTxMsg -> ExtId = 0x1314;
 327:Src/main.c    ****   // hcan.pTxMsg -> RTR = CAN_RTR_DATA;
 328:Src/main.c    ****   // hcan.pTxMsg -> IDE = CAN_ID_EXT;
 329:Src/main.c    ****   // hcan.pTxMsg -> DLC = 2;
 330:Src/main.c    ****   // hcan.pTxMsg -> Data[0] = 0xAB;
 331:Src/main.c    ****   // hcan.pTxMsg -> Data[1] = 0xCD;
 332:Src/main.c    **** 
 333:Src/main.c    ****   // HAL_CAN_Transmit(&hcan, 10);  // 注意第二个参数是timeout，与常规库函数不同
 334:Src/main.c    ****   /* Infinite loop */
 335:Src/main.c    ****   for(;;)
 336:Src/main.c    ****   {
 337:Src/main.c    ****     // osDelay(1000);
 338:Src/main.c    ****     // HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 339:Src/main.c    ****     // HAL_CAN_Transmit(&hcan, 10);
 340:Src/main.c    **** 
 341:Src/main.c    ****     osDelay(1);
 170              		.loc 1 341 0 discriminator 1
 171 003a 0120     		movs	r0, #1
 172 003c FFF7FEFF 		bl	osDelay
 173              	.LVL7:
 174 0040 FBE7     		b	.L6
 175              	.L9:
ARM GAS  /tmp/cc8wjvyi.s 			page 10


 176 0042 00BF     		.align	2
 177              	.L8:
 178 0044 00000000 		.word	hcan
 179 0048 00000000 		.word	RxMessage
 180 004c 00000000 		.word	.LC4
 181 0050 00000000 		.word	huart1
 182 0054 00000000 		.word	sFliterConfig
 183              		.cfi_endproc
 184              	.LFE74:
 186              		.section	.text.Func_Task1,"ax",%progbits
 187              		.align	2
 188              		.global	Func_Task1
 189              		.thumb
 190              		.thumb_func
 192              	Func_Task1:
 193              	.LFB75:
 342:Src/main.c    ****     // HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 343:Src/main.c    ****     // HAL_CAN_Transmit(&hcan, 10);
 344:Src/main.c    ****   }
 345:Src/main.c    ****   /* USER CODE END 5 */ 
 346:Src/main.c    **** }
 347:Src/main.c    **** 
 348:Src/main.c    **** /* Func_Task1 function */
 349:Src/main.c    **** void Func_Task1(void const * argument)
 350:Src/main.c    **** {
 194              		.loc 1 350 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 16
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              	.LVL8:
 199 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 200              	.LCFI4:
 201              		.cfi_def_cfa_offset 20
 202              		.cfi_offset 4, -20
 203              		.cfi_offset 5, -16
 204              		.cfi_offset 6, -12
 205              		.cfi_offset 7, -8
 206              		.cfi_offset 14, -4
 207 0002 85B0     		sub	sp, sp, #20
 208              	.LCFI5:
 209              		.cfi_def_cfa_offset 40
 351:Src/main.c    ****   /* USER CODE BEGIN Func_Task1 */
 352:Src/main.c    ****   /* Infinite loop */
 353:Src/main.c    ****   flag = 0;
 210              		.loc 1 353 0
 211 0004 0022     		movs	r2, #0
 212 0006 174B     		ldr	r3, .L14
 213 0008 1A60     		str	r2, [r3]
 214              	.LVL9:
 215              	.L11:
 354:Src/main.c    **** 
 355:Src/main.c    ****   char str1[8];
 356:Src/main.c    ****   char str2[8];
 357:Src/main.c    **** 
 358:Src/main.c    ****   for(;;)
 359:Src/main.c    ****   {
 360:Src/main.c    ****     // osDelay(1);
ARM GAS  /tmp/cc8wjvyi.s 			page 11


 361:Src/main.c    ****     while (flag == 0);
 216              		.loc 1 361 0 discriminator 1
 217 000a 164B     		ldr	r3, .L14
 218 000c 1B68     		ldr	r3, [r3]
 219 000e 002B     		cmp	r3, #0
 220 0010 FBD0     		beq	.L11
 362:Src/main.c    ****     flag = 0;
 221              		.loc 1 362 0
 222 0012 0025     		movs	r5, #0
 223 0014 134B     		ldr	r3, .L14
 224 0016 1D60     		str	r5, [r3]
 363:Src/main.c    ****     HAL_UART_Transmit(&huart1, "\r\nOK\r\n", 6, 10);
 225              		.loc 1 363 0
 226 0018 134C     		ldr	r4, .L14+4
 227 001a 0A23     		movs	r3, #10
 228 001c 0622     		movs	r2, #6
 229 001e 1349     		ldr	r1, .L14+8
 230 0020 2046     		mov	r0, r4
 231 0022 FFF7FEFF 		bl	HAL_UART_Transmit
 232              	.LVL10:
 364:Src/main.c    **** 
 365:Src/main.c    ****     sprintf(str1, "%x", RxMessage.Data[0]);
 233              		.loc 1 365 0
 234 0026 124F     		ldr	r7, .L14+12
 235 0028 124E     		ldr	r6, .L14+16
 236 002a 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 237 002c 3146     		mov	r1, r6
 238 002e 02A8     		add	r0, sp, #8
 239 0030 FFF7FEFF 		bl	sprintf
 240              	.LVL11:
 366:Src/main.c    ****     sprintf(str2, "%x", RxMessage.Data[1]);
 241              		.loc 1 366 0
 242 0034 7A7D     		ldrb	r2, [r7, #21]	@ zero_extendqisi2
 243 0036 3146     		mov	r1, r6
 244 0038 6846     		mov	r0, sp
 245 003a FFF7FEFF 		bl	sprintf
 246              	.LVL12:
 367:Src/main.c    ****     // if (RxMessage.Data[0] = 0xAB)
 368:Src/main.c    ****     //     HAL_UART_Transmit(&huart1, "AB", 2, 10);
 369:Src/main.c    ****     HAL_UART_Transmit(&huart1, str1, 8, 10);
 247              		.loc 1 369 0
 248 003e 0A23     		movs	r3, #10
 249 0040 0822     		movs	r2, #8
 250 0042 0DEB0201 		add	r1, sp, r2
 251 0046 2046     		mov	r0, r4
 252 0048 FFF7FEFF 		bl	HAL_UART_Transmit
 253              	.LVL13:
 370:Src/main.c    ****     HAL_UART_Transmit(&huart1, str2, 8, 10);
 254              		.loc 1 370 0
 255 004c 0A23     		movs	r3, #10
 256 004e 0822     		movs	r2, #8
 257 0050 6946     		mov	r1, sp
 258 0052 2046     		mov	r0, r4
 259 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 260              	.LVL14:
 371:Src/main.c    ****     
 372:Src/main.c    ****     HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);    // 在USB_LP_CAN1_RX0_IRQHandler里用HAL_CAN_IRQHandl
ARM GAS  /tmp/cc8wjvyi.s 			page 12


 261              		.loc 1 372 0
 262 0058 2946     		mov	r1, r5
 263 005a 0748     		ldr	r0, .L14+20
 264 005c FFF7FEFF 		bl	HAL_CAN_Receive_IT
 265              	.LVL15:
 373:Src/main.c    ****     
 374:Src/main.c    ****     
 375:Src/main.c    ****   }
 266              		.loc 1 375 0
 267 0060 D3E7     		b	.L11
 268              	.L15:
 269 0062 00BF     		.align	2
 270              	.L14:
 271 0064 00000000 		.word	flag
 272 0068 00000000 		.word	huart1
 273 006c 10000000 		.word	.LC5
 274 0070 00000000 		.word	RxMessage
 275 0074 18000000 		.word	.LC6
 276 0078 00000000 		.word	hcan
 277              		.cfi_endproc
 278              	.LFE75:
 280              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 281              		.align	2
 282              		.global	HAL_TIM_PeriodElapsedCallback
 283              		.thumb
 284              		.thumb_func
 286              	HAL_TIM_PeriodElapsedCallback:
 287              	.LFB76:
 376:Src/main.c    ****   /* USER CODE END Func_Task1 */
 377:Src/main.c    **** }
 378:Src/main.c    **** 
 379:Src/main.c    **** /**
 380:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 381:Src/main.c    ****   * @note   This function is called  when TIM4 interrupt took place, inside
 382:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 383:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 384:Src/main.c    ****   * @param  htim : TIM handle
 385:Src/main.c    ****   * @retval None
 386:Src/main.c    ****   */
 387:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 388:Src/main.c    **** {
 288              		.loc 1 388 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              	.LVL16:
 293 0000 08B5     		push	{r3, lr}
 294              	.LCFI6:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 3, -8
 297              		.cfi_offset 14, -4
 389:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 390:Src/main.c    **** 
 391:Src/main.c    ****   /* USER CODE END Callback 0 */
 392:Src/main.c    ****   if (htim->Instance == TIM4) {
 298              		.loc 1 392 0
 299 0002 0268     		ldr	r2, [r0]
ARM GAS  /tmp/cc8wjvyi.s 			page 13


 300 0004 024B     		ldr	r3, .L19
 301 0006 9A42     		cmp	r2, r3
 302 0008 01D1     		bne	.L16
 393:Src/main.c    ****     HAL_IncTick();
 303              		.loc 1 393 0
 304 000a FFF7FEFF 		bl	HAL_IncTick
 305              	.LVL17:
 306              	.L16:
 307 000e 08BD     		pop	{r3, pc}
 308              	.L20:
 309              		.align	2
 310              	.L19:
 311 0010 00080040 		.word	1073743872
 312              		.cfi_endproc
 313              	.LFE76:
 315              		.section	.text._Error_Handler,"ax",%progbits
 316              		.align	2
 317              		.global	_Error_Handler
 318              		.thumb
 319              		.thumb_func
 321              	_Error_Handler:
 322              	.LFB77:
 394:Src/main.c    ****   }
 395:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 396:Src/main.c    **** 
 397:Src/main.c    ****   /* USER CODE END Callback 1 */
 398:Src/main.c    **** }
 399:Src/main.c    **** 
 400:Src/main.c    **** /**
 401:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 402:Src/main.c    ****   * @param  file: The file name as string.
 403:Src/main.c    ****   * @param  line: The line in file as a number.
 404:Src/main.c    ****   * @retval None
 405:Src/main.c    ****   */
 406:Src/main.c    **** void _Error_Handler(char *file, int line)
 407:Src/main.c    **** {
 323              		.loc 1 407 0
 324              		.cfi_startproc
 325              		@ Volatile: function does not return.
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              		@ link register save eliminated.
 329              	.LVL18:
 330              	.L22:
 331 0000 FEE7     		b	.L22
 332              		.cfi_endproc
 333              	.LFE77:
 335 0002 00BF     		.section	.text.MX_CAN_Init,"ax",%progbits
 336              		.align	2
 337              		.thumb
 338              		.thumb_func
 340              	MX_CAN_Init:
 341              	.LFB71:
 228:Src/main.c    **** 
 342              		.loc 1 228 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc8wjvyi.s 			page 14


 345              		@ frame_needed = 0, uses_anonymous_args = 0
 228:Src/main.c    **** 
 346              		.loc 1 228 0
 347 0000 08B5     		push	{r3, lr}
 348              	.LCFI7:
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 3, -8
 351              		.cfi_offset 14, -4
 230:Src/main.c    ****   hcan.Init.Prescaler = 18;
 352              		.loc 1 230 0
 353 0002 0E48     		ldr	r0, .L26
 354 0004 0E4B     		ldr	r3, .L26+4
 355 0006 0360     		str	r3, [r0]
 231:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 356              		.loc 1 231 0
 357 0008 1223     		movs	r3, #18
 358 000a 4360     		str	r3, [r0, #4]
 232:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 359              		.loc 1 232 0
 360 000c 0023     		movs	r3, #0
 361 000e 8360     		str	r3, [r0, #8]
 233:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_7TQ;
 362              		.loc 1 233 0
 363 0010 C360     		str	r3, [r0, #12]
 234:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_8TQ;
 364              		.loc 1 234 0
 365 0012 4FF4C022 		mov	r2, #393216
 366 0016 0261     		str	r2, [r0, #16]
 235:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 367              		.loc 1 235 0
 368 0018 4FF4E002 		mov	r2, #7340032
 369 001c 4261     		str	r2, [r0, #20]
 236:Src/main.c    ****   hcan.Init.ABOM = DISABLE;
 370              		.loc 1 236 0
 371 001e 8361     		str	r3, [r0, #24]
 237:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 372              		.loc 1 237 0
 373 0020 C361     		str	r3, [r0, #28]
 238:Src/main.c    ****   hcan.Init.NART = DISABLE;
 374              		.loc 1 238 0
 375 0022 0362     		str	r3, [r0, #32]
 239:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 376              		.loc 1 239 0
 377 0024 4362     		str	r3, [r0, #36]
 240:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 378              		.loc 1 240 0
 379 0026 8362     		str	r3, [r0, #40]
 241:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 380              		.loc 1 241 0
 381 0028 C362     		str	r3, [r0, #44]
 242:Src/main.c    ****   {
 382              		.loc 1 242 0
 383 002a FFF7FEFF 		bl	HAL_CAN_Init
 384              	.LVL19:
 385 002e 18B1     		cbz	r0, .L23
 244:Src/main.c    ****   }
 386              		.loc 1 244 0
ARM GAS  /tmp/cc8wjvyi.s 			page 15


 387 0030 F421     		movs	r1, #244
 388 0032 0448     		ldr	r0, .L26+8
 389 0034 FFF7FEFF 		bl	_Error_Handler
 390              	.LVL20:
 391              	.L23:
 392 0038 08BD     		pop	{r3, pc}
 393              	.L27:
 394 003a 00BF     		.align	2
 395              	.L26:
 396 003c 00000000 		.word	hcan
 397 0040 00640040 		.word	1073767424
 398 0044 1C000000 		.word	.LC7
 399              		.cfi_endproc
 400              	.LFE71:
 402              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 403              		.align	2
 404              		.thumb
 405              		.thumb_func
 407              	MX_USART1_UART_Init:
 408              	.LFB72:
 251:Src/main.c    **** 
 409              		.loc 1 251 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413 0000 08B5     		push	{r3, lr}
 414              	.LCFI8:
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 3, -8
 417              		.cfi_offset 14, -4
 253:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 418              		.loc 1 253 0
 419 0002 0B48     		ldr	r0, .L31
 420 0004 0B4B     		ldr	r3, .L31+4
 421 0006 0360     		str	r3, [r0]
 254:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 422              		.loc 1 254 0
 423 0008 4FF4E133 		mov	r3, #115200
 424 000c 4360     		str	r3, [r0, #4]
 255:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 425              		.loc 1 255 0
 426 000e 0023     		movs	r3, #0
 427 0010 8360     		str	r3, [r0, #8]
 256:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 428              		.loc 1 256 0
 429 0012 C360     		str	r3, [r0, #12]
 257:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 430              		.loc 1 257 0
 431 0014 0361     		str	r3, [r0, #16]
 258:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 432              		.loc 1 258 0
 433 0016 0C22     		movs	r2, #12
 434 0018 4261     		str	r2, [r0, #20]
 259:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 435              		.loc 1 259 0
 436 001a 8361     		str	r3, [r0, #24]
 260:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
ARM GAS  /tmp/cc8wjvyi.s 			page 16


 437              		.loc 1 260 0
 438 001c C361     		str	r3, [r0, #28]
 261:Src/main.c    ****   {
 439              		.loc 1 261 0
 440 001e FFF7FEFF 		bl	HAL_UART_Init
 441              	.LVL21:
 442 0022 20B1     		cbz	r0, .L28
 263:Src/main.c    ****   }
 443              		.loc 1 263 0
 444 0024 40F20711 		movw	r1, #263
 445 0028 0348     		ldr	r0, .L31+8
 446 002a FFF7FEFF 		bl	_Error_Handler
 447              	.LVL22:
 448              	.L28:
 449 002e 08BD     		pop	{r3, pc}
 450              	.L32:
 451              		.align	2
 452              	.L31:
 453 0030 00000000 		.word	huart1
 454 0034 00380140 		.word	1073821696
 455 0038 1C000000 		.word	.LC7
 456              		.cfi_endproc
 457              	.LFE72:
 459              		.section	.text.SystemClock_Config,"ax",%progbits
 460              		.align	2
 461              		.global	SystemClock_Config
 462              		.thumb
 463              		.thumb_func
 465              	SystemClock_Config:
 466              	.LFB70:
 181:Src/main.c    **** 
 467              		.loc 1 181 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 64
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471 0000 00B5     		push	{lr}
 472              	.LCFI9:
 473              		.cfi_def_cfa_offset 4
 474              		.cfi_offset 14, -4
 475 0002 91B0     		sub	sp, sp, #68
 476              	.LCFI10:
 477              		.cfi_def_cfa_offset 72
 188:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 478              		.loc 1 188 0
 479 0004 0122     		movs	r2, #1
 480 0006 0692     		str	r2, [sp, #24]
 189:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 481              		.loc 1 189 0
 482 0008 4FF48033 		mov	r3, #65536
 483 000c 0793     		str	r3, [sp, #28]
 190:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 484              		.loc 1 190 0
 485 000e 0021     		movs	r1, #0
 486 0010 0891     		str	r1, [sp, #32]
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 487              		.loc 1 191 0
 488 0012 0A92     		str	r2, [sp, #40]
ARM GAS  /tmp/cc8wjvyi.s 			page 17


 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 489              		.loc 1 192 0
 490 0014 0222     		movs	r2, #2
 491 0016 0D92     		str	r2, [sp, #52]
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 492              		.loc 1 193 0
 493 0018 0E93     		str	r3, [sp, #56]
 194:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 494              		.loc 1 194 0
 495 001a 4FF4E013 		mov	r3, #1835008
 496 001e 0F93     		str	r3, [sp, #60]
 195:Src/main.c    ****   {
 497              		.loc 1 195 0
 498 0020 06A8     		add	r0, sp, #24
 499 0022 FFF7FEFF 		bl	HAL_RCC_OscConfig
 500              	.LVL23:
 501 0026 18B1     		cbz	r0, .L34
 197:Src/main.c    ****   }
 502              		.loc 1 197 0
 503 0028 C521     		movs	r1, #197
 504 002a 1448     		ldr	r0, .L37
 505 002c FFF7FEFF 		bl	_Error_Handler
 506              	.LVL24:
 507              	.L34:
 202:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 508              		.loc 1 202 0
 509 0030 0F23     		movs	r3, #15
 510 0032 0193     		str	r3, [sp, #4]
 204:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 511              		.loc 1 204 0
 512 0034 0221     		movs	r1, #2
 513 0036 0291     		str	r1, [sp, #8]
 205:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 514              		.loc 1 205 0
 515 0038 0023     		movs	r3, #0
 516 003a 0393     		str	r3, [sp, #12]
 206:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 517              		.loc 1 206 0
 518 003c 4FF48062 		mov	r2, #1024
 519 0040 0492     		str	r2, [sp, #16]
 207:Src/main.c    **** 
 520              		.loc 1 207 0
 521 0042 0593     		str	r3, [sp, #20]
 209:Src/main.c    ****   {
 522              		.loc 1 209 0
 523 0044 01A8     		add	r0, sp, #4
 524 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 525              	.LVL25:
 526 004a 18B1     		cbz	r0, .L35
 211:Src/main.c    ****   }
 527              		.loc 1 211 0
 528 004c D321     		movs	r1, #211
 529 004e 0B48     		ldr	r0, .L37
 530 0050 FFF7FEFF 		bl	_Error_Handler
 531              	.LVL26:
 532              	.L35:
 216:Src/main.c    **** 
ARM GAS  /tmp/cc8wjvyi.s 			page 18


 533              		.loc 1 216 0
 534 0054 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 535              	.LVL27:
 536 0058 094B     		ldr	r3, .L37+4
 537 005a A3FB0030 		umull	r3, r0, r3, r0
 538 005e 8009     		lsrs	r0, r0, #6
 539 0060 FFF7FEFF 		bl	HAL_SYSTICK_Config
 540              	.LVL28:
 220:Src/main.c    **** 
 541              		.loc 1 220 0
 542 0064 0420     		movs	r0, #4
 543 0066 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 544              	.LVL29:
 223:Src/main.c    **** }
 545              		.loc 1 223 0
 546 006a 0022     		movs	r2, #0
 547 006c 0F21     		movs	r1, #15
 548 006e 4FF0FF30 		mov	r0, #-1
 549 0072 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 550              	.LVL30:
 224:Src/main.c    **** 
 551              		.loc 1 224 0
 552 0076 11B0     		add	sp, sp, #68
 553              	.LCFI11:
 554              		.cfi_def_cfa_offset 4
 555              		@ sp needed
 556 0078 5DF804FB 		ldr	pc, [sp], #4
 557              	.L38:
 558              		.align	2
 559              	.L37:
 560 007c 1C000000 		.word	.LC7
 561 0080 D34D6210 		.word	274877907
 562              		.cfi_endproc
 563              	.LFE70:
 565              		.section	.text.main,"ax",%progbits
 566              		.align	2
 567              		.global	main
 568              		.thumb
 569              		.thumb_func
 571              	main:
 572              	.LFB69:
  98:Src/main.c    ****   /* USER CODE BEGIN 1 */
 573              		.loc 1 98 0
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 40
 576              		@ frame_needed = 0, uses_anonymous_args = 0
 577 0000 70B5     		push	{r4, r5, r6, lr}
 578              	.LCFI12:
 579              		.cfi_def_cfa_offset 16
 580              		.cfi_offset 4, -16
 581              		.cfi_offset 5, -12
 582              		.cfi_offset 6, -8
 583              		.cfi_offset 14, -4
 584 0002 8AB0     		sub	sp, sp, #40
 585              	.LCFI13:
 586              		.cfi_def_cfa_offset 56
 106:Src/main.c    **** 
ARM GAS  /tmp/cc8wjvyi.s 			page 19


 587              		.loc 1 106 0
 588 0004 FFF7FEFF 		bl	HAL_Init
 589              	.LVL31:
 113:Src/main.c    **** 
 590              		.loc 1 113 0
 591 0008 FFF7FEFF 		bl	SystemClock_Config
 592              	.LVL32:
 120:Src/main.c    ****   MX_CAN_Init();
 593              		.loc 1 120 0
 594 000c FFF7FEFF 		bl	MX_GPIO_Init
 595              	.LVL33:
 121:Src/main.c    ****   MX_USART1_UART_Init();
 596              		.loc 1 121 0
 597 0010 FFF7FEFF 		bl	MX_CAN_Init
 598              	.LVL34:
 122:Src/main.c    ****   /* USER CODE BEGIN 2 */
 599              		.loc 1 122 0
 600 0014 FFF7FEFF 		bl	MX_USART1_UART_Init
 601              	.LVL35:
 141:Src/main.c    ****   Task0Handle = osThreadCreate(osThread(Task0), NULL);
 602              		.loc 1 141 0
 603 0018 0D4C     		ldr	r4, .L42
 604 001a 05AD     		add	r5, sp, #20
 605 001c 2646     		mov	r6, r4
 606 001e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 607 0020 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 608 0022 3368     		ldr	r3, [r6]
 609 0024 2B60     		str	r3, [r5]
 142:Src/main.c    **** 
 610              		.loc 1 142 0
 611 0026 0021     		movs	r1, #0
 612 0028 05A8     		add	r0, sp, #20
 613 002a FFF7FEFF 		bl	osThreadCreate
 614              	.LVL36:
 615 002e 094B     		ldr	r3, .L42+4
 616 0030 1860     		str	r0, [r3]
 145:Src/main.c    ****   Task1Handle = osThreadCreate(osThread(Task1), NULL);
 617              		.loc 1 145 0
 618 0032 6D46     		mov	r5, sp
 619 0034 1434     		adds	r4, r4, #20
 620 0036 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 621 0038 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 622 003a 2368     		ldr	r3, [r4]
 623 003c 2B60     		str	r3, [r5]
 146:Src/main.c    **** 
 624              		.loc 1 146 0
 625 003e 0021     		movs	r1, #0
 626 0040 6846     		mov	r0, sp
 627 0042 FFF7FEFF 		bl	osThreadCreate
 628              	.LVL37:
 629 0046 044B     		ldr	r3, .L42+8
 630 0048 1860     		str	r0, [r3]
 158:Src/main.c    ****   
 631              		.loc 1 158 0
 632 004a FFF7FEFF 		bl	osKernelStart
 633              	.LVL38:
 634              	.L40:
ARM GAS  /tmp/cc8wjvyi.s 			page 20


 635 004e FEE7     		b	.L40
 636              	.L43:
 637              		.align	2
 638              	.L42:
 639 0050 00000000 		.word	.LANCHOR0
 640 0054 00000000 		.word	Task0Handle
 641 0058 00000000 		.word	Task1Handle
 642              		.cfi_endproc
 643              	.LFE69:
 645              		.comm	flag,4,4
 646              		.comm	RxMessage,36,4
 647              		.comm	TxMessage,28,4
 648              		.comm	sFliterConfig,40,4
 649              		.comm	Task1Handle,4,4
 650              		.comm	Task0Handle,4,4
 651              		.comm	huart1,64,4
 652              		.comm	hcan,68,4
 653              		.section	.rodata
 654              		.align	2
 655              		.set	.LANCHOR0,. + 0
 656              	.LC8:
 657 0000 30000000 		.word	.LC0
 658 0004 00000000 		.word	Func_Task0
 659 0008 0000     		.short	0
 660 000a 0000     		.space	2
 661 000c 00000000 		.word	0
 662 0010 00010000 		.word	256
 663              	.LC9:
 664 0014 28000000 		.word	.LC2
 665 0018 00000000 		.word	Func_Task1
 666 001c 0000     		.short	0
 667 001e 0000     		.space	2
 668 0020 00000000 		.word	0
 669 0024 00010000 		.word	256
 670              		.section	.rodata.str1.4,"aMS",%progbits,1
 671              		.align	2
 672              	.LC4:
 673 0000 0D0A4675 		.ascii	"\015\012Func_Task0\015\012\000"
 673      6E635F54 
 673      61736B30 
 673      0D0A00
 674 000f 00       		.space	1
 675              	.LC5:
 676 0010 0D0A4F4B 		.ascii	"\015\012OK\015\012\000"
 676      0D0A00
 677 0017 00       		.space	1
 678              	.LC6:
 679 0018 257800   		.ascii	"%x\000"
 680 001b 00       		.space	1
 681              	.LC7:
 682 001c 5372632F 		.ascii	"Src/main.c\000"
 682      6D61696E 
 682      2E6300
 683 0027 00       		.space	1
 684              	.LC2:
 685 0028 5461736B 		.ascii	"Task1\000"
 685      3100
ARM GAS  /tmp/cc8wjvyi.s 			page 21


 686 002e 0000     		.space	2
 687              	.LC0:
 688 0030 5461736B 		.ascii	"Task0\000"
 688      3000
 689              		.text
 690              	.Letext0:
 691              		.file 2 "/home/user/Library/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_ty
 692              		.file 3 "/home/user/Library/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 693              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 694              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 695              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 696              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 697              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 698              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 699              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 700              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 701              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can_ex.h"
 702              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 703              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 704              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 705              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 706              		.file 17 "Drivers/CMSIS/Include/core_cm3.h"
 707              		.file 18 "/home/user/Library/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/stdio.h"
 708              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 709              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/cc8wjvyi.s 			page 22


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc8wjvyi.s:20     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc8wjvyi.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc8wjvyi.s:103    .text.MX_GPIO_Init:00000064 $d
     /tmp/cc8wjvyi.s:109    .text.Func_Task0:00000000 $t
     /tmp/cc8wjvyi.s:114    .text.Func_Task0:00000000 Func_Task0
     /tmp/cc8wjvyi.s:178    .text.Func_Task0:00000044 $d
                            *COM*:00000044 hcan
                            *COM*:00000024 RxMessage
                            *COM*:00000040 huart1
                            *COM*:00000028 sFliterConfig
     /tmp/cc8wjvyi.s:187    .text.Func_Task1:00000000 $t
     /tmp/cc8wjvyi.s:192    .text.Func_Task1:00000000 Func_Task1
     /tmp/cc8wjvyi.s:271    .text.Func_Task1:00000064 $d
                            *COM*:00000004 flag
     /tmp/cc8wjvyi.s:281    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/cc8wjvyi.s:286    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc8wjvyi.s:311    .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
     /tmp/cc8wjvyi.s:316    .text._Error_Handler:00000000 $t
     /tmp/cc8wjvyi.s:321    .text._Error_Handler:00000000 _Error_Handler
     /tmp/cc8wjvyi.s:336    .text.MX_CAN_Init:00000000 $t
     /tmp/cc8wjvyi.s:340    .text.MX_CAN_Init:00000000 MX_CAN_Init
     /tmp/cc8wjvyi.s:396    .text.MX_CAN_Init:0000003c $d
     /tmp/cc8wjvyi.s:403    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/cc8wjvyi.s:407    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/cc8wjvyi.s:453    .text.MX_USART1_UART_Init:00000030 $d
     /tmp/cc8wjvyi.s:460    .text.SystemClock_Config:00000000 $t
     /tmp/cc8wjvyi.s:465    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc8wjvyi.s:560    .text.SystemClock_Config:0000007c $d
     /tmp/cc8wjvyi.s:566    .text.main:00000000 $t
     /tmp/cc8wjvyi.s:571    .text.main:00000000 main
     /tmp/cc8wjvyi.s:639    .text.main:00000050 $d
                            *COM*:00000004 Task0Handle
                            *COM*:00000004 Task1Handle
                            *COM*:0000001c TxMessage
     /tmp/cc8wjvyi.s:654    .rodata:00000000 $d
     /tmp/cc8wjvyi.s:671    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Transmit
HAL_CAN_ConfigFilter
HAL_CAN_Receive_IT
osDelay
sprintf
HAL_IncTick
HAL_CAN_Init
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
ARM GAS  /tmp/cc8wjvyi.s 			page 23


HAL_Init
osThreadCreate
osKernelStart
