ARM GAS  /tmp/cc93g7ii.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_DMA_Init,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	MX_DMA_Init:
  25              	.LFB76:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2019 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  32:Src/main.c    ****   *    this license. 
ARM GAS  /tmp/cc93g7ii.s 			page 2


  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f1xx_hal.h"
  52:Src/main.c    **** #include "cmsis_os.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END Includes */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  59:Src/main.c    **** CAN_HandleTypeDef hcan;
  60:Src/main.c    **** 
  61:Src/main.c    **** UART_HandleTypeDef huart1;
  62:Src/main.c    **** UART_HandleTypeDef huart2;
  63:Src/main.c    **** UART_HandleTypeDef huart3;
  64:Src/main.c    **** DMA_HandleTypeDef hdma_usart2_rx;
  65:Src/main.c    **** 
  66:Src/main.c    **** osThreadId Task0Handle;
  67:Src/main.c    **** osThreadId Task1Handle;
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PV */
  70:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  71:Src/main.c    **** CAN_FilterConfTypeDef  sFliterConfig;
  72:Src/main.c    **** CanTxMsgTypeDef TxMessage;
  73:Src/main.c    **** CanRxMsgTypeDef RxMessage;
  74:Src/main.c    **** 
  75:Src/main.c    **** uint8_t aRxBuffer1[1];
  76:Src/main.c    **** uint8_t aRxBuffer2[1];
  77:Src/main.c    **** uint8_t aRxBuffer3[1];
  78:Src/main.c    **** 
  79:Src/main.c    **** uint8_t aRxBuffer2_Data[4];
  80:Src/main.c    **** uint8_t aRxBuffer2_Data_flag = 0;
  81:Src/main.c    **** uint8_t aRxBuffer2_Data_Index = 0;
  82:Src/main.c    **** 
  83:Src/main.c    **** #define BUFFERSIZE 255                                
  84:Src/main.c    **** uint8_t ReceiveBuff[BUFFERSIZE];         //接收缓冲区
  85:Src/main.c    **** uint8_t recv_end_flag = 0,Rx_len;        //接收完成中断，接收到字符长度
  86:Src/main.c    **** /* USER CODE END PV */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  89:Src/main.c    **** void SystemClock_Config(void);
ARM GAS  /tmp/cc93g7ii.s 			page 3


  90:Src/main.c    **** static void MX_GPIO_Init(void);
  91:Src/main.c    **** static void MX_DMA_Init(void);
  92:Src/main.c    **** static void MX_CAN_Init(void);
  93:Src/main.c    **** static void MX_USART1_UART_Init(void);
  94:Src/main.c    **** static void MX_USART2_UART_Init(void);
  95:Src/main.c    **** static void MX_USART3_UART_Init(void);
  96:Src/main.c    **** void Func_Task0(void const * argument);
  97:Src/main.c    **** void Func_Task1(void const * argument);
  98:Src/main.c    **** static void MX_NVIC_Init(void);
  99:Src/main.c    **** 
 100:Src/main.c    **** /* USER CODE BEGIN PFP */
 101:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 102:Src/main.c    **** void uartdamget(void);
 103:Src/main.c    **** /* USER CODE END PFP */
 104:Src/main.c    **** 
 105:Src/main.c    **** /* USER CODE BEGIN 0 */
 106:Src/main.c    **** 
 107:Src/main.c    **** /* USER CODE END 0 */
 108:Src/main.c    **** 
 109:Src/main.c    **** /**
 110:Src/main.c    ****   * @brief  The application entry point.
 111:Src/main.c    ****   *
 112:Src/main.c    ****   * @retval None
 113:Src/main.c    ****   */
 114:Src/main.c    **** int main(void)
 115:Src/main.c    **** {
 116:Src/main.c    ****   /* USER CODE BEGIN 1 */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE END 1 */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 123:Src/main.c    ****   HAL_Init();
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE BEGIN Init */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE END Init */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* Configure the system clock */
 130:Src/main.c    ****   SystemClock_Config();
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE END SysInit */
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* Initialize all configured peripherals */
 137:Src/main.c    ****   MX_GPIO_Init();
 138:Src/main.c    ****   MX_DMA_Init();
 139:Src/main.c    ****   MX_CAN_Init();
 140:Src/main.c    ****   MX_USART1_UART_Init();
 141:Src/main.c    ****   MX_USART2_UART_Init();
 142:Src/main.c    ****   MX_USART3_UART_Init();
 143:Src/main.c    **** 
 144:Src/main.c    ****   /* Initialize interrupts */
 145:Src/main.c    ****   MX_NVIC_Init();
 146:Src/main.c    ****   /* USER CODE BEGIN 2 */
ARM GAS  /tmp/cc93g7ii.s 			page 4


 147:Src/main.c    ****   HAL_UART_Transmit(&huart3,"DMA\r\n",5,10);
 148:Src/main.c    ****   /*        使能串口2 IDLE中断        */
 149:Src/main.c    ****   __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 150:Src/main.c    ****   /* USER CODE END 2 */
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 153:Src/main.c    ****   /* add mutexes, ... */
 154:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 157:Src/main.c    ****   /* add semaphores, ... */
 158:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 159:Src/main.c    **** 
 160:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 161:Src/main.c    ****   /* start timers, add new ones, ... */
 162:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 163:Src/main.c    **** 
 164:Src/main.c    ****   /* Create the thread(s) */
 165:Src/main.c    ****   /* definition and creation of Task0 */
 166:Src/main.c    ****   osThreadDef(Task0, Func_Task0, osPriorityNormal, 0, 256);
 167:Src/main.c    ****   Task0Handle = osThreadCreate(osThread(Task0), NULL);
 168:Src/main.c    **** 
 169:Src/main.c    ****   /* definition and creation of Task1 */
 170:Src/main.c    ****   osThreadDef(Task1, Func_Task1, osPriorityNormal, 0, 256);
 171:Src/main.c    ****   Task1Handle = osThreadCreate(osThread(Task1), NULL);
 172:Src/main.c    **** 
 173:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 174:Src/main.c    ****   /* add threads, ... */
 175:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 176:Src/main.c    **** 
 177:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 178:Src/main.c    ****   /* add queues, ... */
 179:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 180:Src/main.c    ****  
 181:Src/main.c    **** 
 182:Src/main.c    ****   /* Start scheduler */
 183:Src/main.c    ****   osKernelStart();
 184:Src/main.c    ****   
 185:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 186:Src/main.c    **** 
 187:Src/main.c    ****   /* Infinite loop */
 188:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 189:Src/main.c    ****   while (1)
 190:Src/main.c    ****   {
 191:Src/main.c    **** 
 192:Src/main.c    ****   /* USER CODE END WHILE */
 193:Src/main.c    **** 
 194:Src/main.c    ****   /* USER CODE BEGIN 3 */
 195:Src/main.c    **** 
 196:Src/main.c    ****   }
 197:Src/main.c    ****   /* USER CODE END 3 */
 198:Src/main.c    **** 
 199:Src/main.c    **** }
 200:Src/main.c    **** 
 201:Src/main.c    **** /**
 202:Src/main.c    ****   * @brief System Clock Configuration
 203:Src/main.c    ****   * @retval None
ARM GAS  /tmp/cc93g7ii.s 			page 5


 204:Src/main.c    ****   */
 205:Src/main.c    **** void SystemClock_Config(void)
 206:Src/main.c    **** {
 207:Src/main.c    **** 
 208:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 209:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 210:Src/main.c    **** 
 211:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 212:Src/main.c    ****     */
 213:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 214:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 215:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 216:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 217:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 218:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 219:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 220:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 221:Src/main.c    ****   {
 222:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 223:Src/main.c    ****   }
 224:Src/main.c    **** 
 225:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 226:Src/main.c    ****     */
 227:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 228:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 229:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 230:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 231:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 232:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 233:Src/main.c    **** 
 234:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 235:Src/main.c    ****   {
 236:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 237:Src/main.c    ****   }
 238:Src/main.c    **** 
 239:Src/main.c    ****     /**Configure the Systick interrupt time 
 240:Src/main.c    ****     */
 241:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 242:Src/main.c    **** 
 243:Src/main.c    ****     /**Configure the Systick 
 244:Src/main.c    ****     */
 245:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 246:Src/main.c    **** 
 247:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 248:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 249:Src/main.c    **** }
 250:Src/main.c    **** 
 251:Src/main.c    **** /**
 252:Src/main.c    ****   * @brief NVIC Configuration.
 253:Src/main.c    ****   * @retval None
 254:Src/main.c    ****   */
 255:Src/main.c    **** static void MX_NVIC_Init(void)
 256:Src/main.c    **** {
 257:Src/main.c    ****   /* USART1_IRQn interrupt configuration */
 258:Src/main.c    ****   HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 259:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART1_IRQn);
 260:Src/main.c    ****   /* USART2_IRQn interrupt configuration */
ARM GAS  /tmp/cc93g7ii.s 			page 6


 261:Src/main.c    ****   HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 262:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);
 263:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 264:Src/main.c    ****   HAL_NVIC_SetPriority(USART3_IRQn, 7, 0);
 265:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 266:Src/main.c    ****   /* DMA1_Channel6_IRQn interrupt configuration */
 267:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 268:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 269:Src/main.c    **** }
 270:Src/main.c    **** 
 271:Src/main.c    **** /* CAN init function */
 272:Src/main.c    **** static void MX_CAN_Init(void)
 273:Src/main.c    **** {
 274:Src/main.c    **** 
 275:Src/main.c    ****   hcan.Instance = CAN1;
 276:Src/main.c    ****   hcan.Init.Prescaler = 18;
 277:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 278:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 279:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_7TQ;
 280:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_8TQ;
 281:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 282:Src/main.c    ****   hcan.Init.ABOM = DISABLE;
 283:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 284:Src/main.c    ****   hcan.Init.NART = DISABLE;
 285:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 286:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 287:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 288:Src/main.c    ****   {
 289:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 290:Src/main.c    ****   }
 291:Src/main.c    **** 
 292:Src/main.c    **** }
 293:Src/main.c    **** 
 294:Src/main.c    **** /* USART1 init function */
 295:Src/main.c    **** static void MX_USART1_UART_Init(void)
 296:Src/main.c    **** {
 297:Src/main.c    **** 
 298:Src/main.c    ****   huart1.Instance = USART1;
 299:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 300:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 301:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 302:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 303:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 304:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 305:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 306:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 307:Src/main.c    ****   {
 308:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 309:Src/main.c    ****   }
 310:Src/main.c    **** 
 311:Src/main.c    **** }
 312:Src/main.c    **** 
 313:Src/main.c    **** /* USART2 init function */
 314:Src/main.c    **** static void MX_USART2_UART_Init(void)
 315:Src/main.c    **** {
 316:Src/main.c    **** 
 317:Src/main.c    ****   huart2.Instance = USART2;
ARM GAS  /tmp/cc93g7ii.s 			page 7


 318:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 319:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 320:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 321:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 322:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 323:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 324:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 325:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 326:Src/main.c    ****   {
 327:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 328:Src/main.c    ****   }
 329:Src/main.c    **** 
 330:Src/main.c    **** }
 331:Src/main.c    **** 
 332:Src/main.c    **** /* USART3 init function */
 333:Src/main.c    **** static void MX_USART3_UART_Init(void)
 334:Src/main.c    **** {
 335:Src/main.c    **** 
 336:Src/main.c    ****   huart3.Instance = USART3;
 337:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 338:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 339:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 340:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 341:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 342:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 343:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 344:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 345:Src/main.c    ****   {
 346:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 347:Src/main.c    ****   }
 348:Src/main.c    **** 
 349:Src/main.c    **** }
 350:Src/main.c    **** 
 351:Src/main.c    **** /** 
 352:Src/main.c    ****   * Enable DMA controller clock
 353:Src/main.c    ****   */
 354:Src/main.c    **** static void MX_DMA_Init(void) 
 355:Src/main.c    **** {
  27              		.loc 1 355 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              	.LBB2:
 356:Src/main.c    ****   /* DMA controller clock enable */
 357:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
  36              		.loc 1 357 0
  37 0002 064B     		ldr	r3, .L3
  38 0004 5A69     		ldr	r2, [r3, #20]
  39 0006 42F00102 		orr	r2, r2, #1
  40 000a 5A61     		str	r2, [r3, #20]
  41 000c 5B69     		ldr	r3, [r3, #20]
  42 000e 03F00103 		and	r3, r3, #1
  43 0012 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc93g7ii.s 			page 8


  44 0014 019B     		ldr	r3, [sp, #4]
  45              	.LBE2:
 358:Src/main.c    **** 
 359:Src/main.c    **** }
  46              		.loc 1 359 0
  47 0016 02B0     		add	sp, sp, #8
  48              	.LCFI1:
  49              		.cfi_def_cfa_offset 0
  50              		@ sp needed
  51 0018 7047     		bx	lr
  52              	.L4:
  53 001a 00BF     		.align	2
  54              	.L3:
  55 001c 00100240 		.word	1073876992
  56              		.cfi_endproc
  57              	.LFE76:
  59              		.section	.text.MX_GPIO_Init,"ax",%progbits
  60              		.align	2
  61              		.thumb
  62              		.thumb_func
  64              	MX_GPIO_Init:
  65              	.LFB77:
 360:Src/main.c    **** 
 361:Src/main.c    **** /** Configure pins as 
 362:Src/main.c    ****         * Analog 
 363:Src/main.c    ****         * Input 
 364:Src/main.c    ****         * Output
 365:Src/main.c    ****         * EVENT_OUT
 366:Src/main.c    ****         * EXTI
 367:Src/main.c    **** */
 368:Src/main.c    **** static void MX_GPIO_Init(void)
 369:Src/main.c    **** {
  66              		.loc 1 369 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 32
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70 0000 10B5     		push	{r4, lr}
  71              	.LCFI2:
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 4, -8
  74              		.cfi_offset 14, -4
  75 0002 88B0     		sub	sp, sp, #32
  76              	.LCFI3:
  77              		.cfi_def_cfa_offset 40
  78              	.LBB3:
 370:Src/main.c    **** 
 371:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 372:Src/main.c    **** 
 373:Src/main.c    ****   /* GPIO Ports Clock Enable */
 374:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  79              		.loc 1 374 0
  80 0004 174B     		ldr	r3, .L7
  81 0006 9A69     		ldr	r2, [r3, #24]
  82 0008 42F01002 		orr	r2, r2, #16
  83 000c 9A61     		str	r2, [r3, #24]
  84 000e 9A69     		ldr	r2, [r3, #24]
  85 0010 02F01002 		and	r2, r2, #16
ARM GAS  /tmp/cc93g7ii.s 			page 9


  86 0014 0192     		str	r2, [sp, #4]
  87 0016 019A     		ldr	r2, [sp, #4]
  88              	.LBE3:
  89              	.LBB4:
 375:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  90              		.loc 1 375 0
  91 0018 9A69     		ldr	r2, [r3, #24]
  92 001a 42F00402 		orr	r2, r2, #4
  93 001e 9A61     		str	r2, [r3, #24]
  94 0020 9A69     		ldr	r2, [r3, #24]
  95 0022 02F00402 		and	r2, r2, #4
  96 0026 0292     		str	r2, [sp, #8]
  97 0028 029A     		ldr	r2, [sp, #8]
  98              	.LBE4:
  99              	.LBB5:
 376:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 100              		.loc 1 376 0
 101 002a 9A69     		ldr	r2, [r3, #24]
 102 002c 42F00802 		orr	r2, r2, #8
 103 0030 9A61     		str	r2, [r3, #24]
 104 0032 9B69     		ldr	r3, [r3, #24]
 105 0034 03F00803 		and	r3, r3, #8
 106 0038 0393     		str	r3, [sp, #12]
 107 003a 039B     		ldr	r3, [sp, #12]
 108              	.LBE5:
 377:Src/main.c    **** 
 378:Src/main.c    ****   /*Configure GPIO pin Output Level */
 379:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 109              		.loc 1 379 0
 110 003c 0A4C     		ldr	r4, .L7+4
 111 003e 0022     		movs	r2, #0
 112 0040 3821     		movs	r1, #56
 113 0042 2046     		mov	r0, r4
 114 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 115              	.LVL0:
 380:Src/main.c    **** 
 381:Src/main.c    ****   /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
 382:Src/main.c    ****   GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 116              		.loc 1 382 0
 117 0048 3823     		movs	r3, #56
 118 004a 0493     		str	r3, [sp, #16]
 383:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 119              		.loc 1 383 0
 120 004c 0123     		movs	r3, #1
 121 004e 0593     		str	r3, [sp, #20]
 384:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 122              		.loc 1 384 0
 123 0050 0023     		movs	r3, #0
 124 0052 0693     		str	r3, [sp, #24]
 385:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 385 0
 126 0054 0223     		movs	r3, #2
 127 0056 0793     		str	r3, [sp, #28]
 386:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 128              		.loc 1 386 0
 129 0058 04A9     		add	r1, sp, #16
 130 005a 2046     		mov	r0, r4
ARM GAS  /tmp/cc93g7ii.s 			page 10


 131 005c FFF7FEFF 		bl	HAL_GPIO_Init
 132              	.LVL1:
 387:Src/main.c    **** 
 388:Src/main.c    **** }
 133              		.loc 1 388 0
 134 0060 08B0     		add	sp, sp, #32
 135              	.LCFI4:
 136              		.cfi_def_cfa_offset 8
 137              		@ sp needed
 138 0062 10BD     		pop	{r4, pc}
 139              	.L8:
 140              		.align	2
 141              	.L7:
 142 0064 00100240 		.word	1073876992
 143 0068 00100140 		.word	1073811456
 144              		.cfi_endproc
 145              	.LFE77:
 147              		.section	.text.MX_NVIC_Init,"ax",%progbits
 148              		.align	2
 149              		.thumb
 150              		.thumb_func
 152              	MX_NVIC_Init:
 153              	.LFB71:
 256:Src/main.c    ****   /* USART1_IRQn interrupt configuration */
 154              		.loc 1 256 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158 0000 08B5     		push	{r3, lr}
 159              	.LCFI5:
 160              		.cfi_def_cfa_offset 8
 161              		.cfi_offset 3, -8
 162              		.cfi_offset 14, -4
 258:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART1_IRQn);
 163              		.loc 1 258 0
 164 0002 0022     		movs	r2, #0
 165 0004 0621     		movs	r1, #6
 166 0006 2520     		movs	r0, #37
 167 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 168              	.LVL2:
 259:Src/main.c    ****   /* USART2_IRQn interrupt configuration */
 169              		.loc 1 259 0
 170 000c 2520     		movs	r0, #37
 171 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 172              	.LVL3:
 261:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);
 173              		.loc 1 261 0
 174 0012 0022     		movs	r2, #0
 175 0014 0521     		movs	r1, #5
 176 0016 2620     		movs	r0, #38
 177 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 178              	.LVL4:
 262:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 179              		.loc 1 262 0
 180 001c 2620     		movs	r0, #38
 181 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 182              	.LVL5:
ARM GAS  /tmp/cc93g7ii.s 			page 11


 264:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 183              		.loc 1 264 0
 184 0022 0022     		movs	r2, #0
 185 0024 0721     		movs	r1, #7
 186 0026 2720     		movs	r0, #39
 187 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 188              	.LVL6:
 265:Src/main.c    ****   /* DMA1_Channel6_IRQn interrupt configuration */
 189              		.loc 1 265 0
 190 002c 2720     		movs	r0, #39
 191 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 192              	.LVL7:
 267:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 193              		.loc 1 267 0
 194 0032 0022     		movs	r2, #0
 195 0034 0521     		movs	r1, #5
 196 0036 1020     		movs	r0, #16
 197 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 198              	.LVL8:
 268:Src/main.c    **** }
 199              		.loc 1 268 0
 200 003c 1020     		movs	r0, #16
 201 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 202              	.LVL9:
 203 0042 08BD     		pop	{r3, pc}
 204              		.cfi_endproc
 205              	.LFE71:
 207              		.section	.text.Func_Task1,"ax",%progbits
 208              		.align	2
 209              		.global	Func_Task1
 210              		.thumb
 211              		.thumb_func
 213              	Func_Task1:
 214              	.LFB80:
 389:Src/main.c    **** 
 390:Src/main.c    **** /* USER CODE BEGIN 4 */
 391:Src/main.c    **** /*
 392:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 393:Src/main.c    **** {
 394:Src/main.c    ****   if(huart->Instance == USART2)
 395:Src/main.c    ****   {
 396:Src/main.c    **** 	HAL_UART_Transmit(&huart3,aRxBuffer2,1,100);	// 接收到数据马上使用串口3发送出去
 397:Src/main.c    ****     // aRxBuffer2_Data[aRxBuffer2_Data_Index] = aRxBuffer2[1];
 398:Src/main.c    ****     // aRxBuffer2_Data_Index++;
 399:Src/main.c    ****     // if (aRxBuffer2_Data_Index == 3)
 400:Src/main.c    ****     // { 
 401:Src/main.c    ****     //   aRxBuffer2_Data_flag = 1; 
 402:Src/main.c    ****     //   aRxBuffer2_Data_Index = 0;
 403:Src/main.c    ****     // }
 404:Src/main.c    **** 	HAL_UART_Receive_IT(&huart2,aRxBuffer2,1);		// 重新使能串口2接收中断
 405:Src/main.c    ****   }
 406:Src/main.c    **** }
 407:Src/main.c    **** */
 408:Src/main.c    **** 
 409:Src/main.c    **** void uartdamget(void)
 410:Src/main.c    **** {
 411:Src/main.c    ****   uint8_t temp[1];
ARM GAS  /tmp/cc93g7ii.s 			page 12


 412:Src/main.c    ****   HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 413:Src/main.c    **** 
 414:Src/main.c    ****   if(recv_end_flag ==1)
 415:Src/main.c    ****   {
 416:Src/main.c    **** 
 417:Src/main.c    ****  	for(int i=0;i<Rx_len;i++)
 418:Src/main.c    **** 	{
 419:Src/main.c    **** 	  /*打印接收到的数据*/
 420:Src/main.c    **** 	  sprintf(temp,"%c",ReceiveBuff[i]);
 421:Src/main.c    ****       HAL_UART_Transmit(&huart3,temp,1,10);
 422:Src/main.c    **** 
 423:Src/main.c    **** 	  hcan.pTxMsg -> Data[1] = temp;    // 替换CAN的发送数据，暂时用来测试
 424:Src/main.c    ****       HAL_CAN_Transmit(&hcan, 10);      // 用CAN口把数据发出去
 425:Src/main.c    **** 	}
 426:Src/main.c    **** 	HAL_UART_Transmit(&huart3,"\r\n",2,10);         
 427:Src/main.c    **** 	/*清空接收缓存区*/
 428:Src/main.c    ****     for(int i = 0; i < Rx_len ; i++)
 429:Src/main.c    **** 	ReceiveBuff[i]=0;
 430:Src/main.c    **** 	/*接收数据长度清零*/
 431:Src/main.c    **** 	Rx_len=0;
 432:Src/main.c    **** 	recv_end_flag=0;
 433:Src/main.c    ****   }
 434:Src/main.c    ****   /*开启下一次接收*/
 435:Src/main.c    ****   HAL_UART_Receive_DMA(&huart2,(uint8_t*)ReceiveBuff,BUFFERSIZE);    // 注意这里一定要重新
 436:Src/main.c    **** 
 437:Src/main.c    ****   HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 438:Src/main.c    **** }
 439:Src/main.c    **** /* USER CODE END 4 */
 440:Src/main.c    **** 
 441:Src/main.c    **** /* Func_Task0 function */
 442:Src/main.c    **** void Func_Task0(void const * argument)
 443:Src/main.c    **** {
 444:Src/main.c    **** 
 445:Src/main.c    ****   /* USER CODE BEGIN 5 */
 446:Src/main.c    ****   hcan.pTxMsg = &TxMessage;    // hc.pTxMsg 按 TxMessage格式
 447:Src/main.c    ****   
 448:Src/main.c    ****   HAL_UART_Transmit(&huart1,"\r\nFunc_Task0\r\n",14,10);
 449:Src/main.c    ****   
 450:Src/main.c    ****   
 451:Src/main.c    ****   hcan.pTxMsg -> ExtId = 0x1314;
 452:Src/main.c    ****   hcan.pTxMsg -> RTR = CAN_RTR_DATA;
 453:Src/main.c    ****   hcan.pTxMsg -> IDE = CAN_ID_EXT;
 454:Src/main.c    ****   hcan.pTxMsg -> DLC = 2;
 455:Src/main.c    ****   hcan.pTxMsg -> Data[0] = 0xAB;
 456:Src/main.c    ****   hcan.pTxMsg -> Data[1] = 0xCD;
 457:Src/main.c    **** 
 458:Src/main.c    ****   HAL_CAN_Transmit(&hcan, 10);  // 注意第二个参数是timeout，与常规库函数不同
 459:Src/main.c    ****   /* Infinite loop */
 460:Src/main.c    ****   for(;;)
 461:Src/main.c    ****   {
 462:Src/main.c    ****     // osDelay(1000);
 463:Src/main.c    ****     // HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 464:Src/main.c    ****     // HAL_CAN_Transmit(&hcan, 10);
 465:Src/main.c    **** 
 466:Src/main.c    ****     // osDelay(1000);
 467:Src/main.c    ****     // HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 468:Src/main.c    ****     // HAL_CAN_Transmit(&hcan, 10);
ARM GAS  /tmp/cc93g7ii.s 			page 13


 469:Src/main.c    **** 
 470:Src/main.c    ****     uartdamget();
 471:Src/main.c    ****   }
 472:Src/main.c    ****   /* USER CODE END 5 */ 
 473:Src/main.c    **** }
 474:Src/main.c    **** 
 475:Src/main.c    **** /* Func_Task1 function */
 476:Src/main.c    **** void Func_Task1(void const * argument)
 477:Src/main.c    **** {
 215              		.loc 1 477 0
 216              		.cfi_startproc
 217              		@ Volatile: function does not return.
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              	.LVL10:
 221 0000 08B5     		push	{r3, lr}
 222              	.LCFI6:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 3, -8
 225              		.cfi_offset 14, -4
 478:Src/main.c    ****   /* USER CODE BEGIN Func_Task1 */
 479:Src/main.c    ****   HAL_UART_Receive_IT(&huart2,aRxBuffer2,1);
 226              		.loc 1 479 0
 227 0002 264C     		ldr	r4, .L14
 228 0004 0122     		movs	r2, #1
 229 0006 2649     		ldr	r1, .L14+4
 230 0008 2046     		mov	r0, r4
 231              	.LVL11:
 232 000a FFF7FEFF 		bl	HAL_UART_Receive_IT
 233              	.LVL12:
 480:Src/main.c    ****   HAL_UART_Transmit(&huart3,"\r\nFunc_Task1\r\n",14,10);
 234              		.loc 1 480 0
 235 000e 254D     		ldr	r5, .L14+8
 236 0010 0A23     		movs	r3, #10
 237 0012 0E22     		movs	r2, #14
 238 0014 2449     		ldr	r1, .L14+12
 239 0016 2846     		mov	r0, r5
 240 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 241              	.LVL13:
 481:Src/main.c    ****   
 482:Src/main.c    ****   HAL_UART_Transmit(&huart2,"AT+CWMODE=2\r\n",13,10);
 242              		.loc 1 482 0
 243 001c 0A23     		movs	r3, #10
 244 001e 0D22     		movs	r2, #13
 245 0020 2249     		ldr	r1, .L14+16
 246 0022 2046     		mov	r0, r4
 247 0024 FFF7FEFF 		bl	HAL_UART_Transmit
 248              	.LVL14:
 483:Src/main.c    ****   osDelay(5000);
 249              		.loc 1 483 0
 250 0028 41F28830 		movw	r0, #5000
 251 002c FFF7FEFF 		bl	osDelay
 252              	.LVL15:
 484:Src/main.c    ****   HAL_UART_Transmit(&huart2,"AT+RST\r\n",8,10);
 253              		.loc 1 484 0
 254 0030 0A23     		movs	r3, #10
 255 0032 0822     		movs	r2, #8
ARM GAS  /tmp/cc93g7ii.s 			page 14


 256 0034 1E49     		ldr	r1, .L14+20
 257 0036 2046     		mov	r0, r4
 258 0038 FFF7FEFF 		bl	HAL_UART_Transmit
 259              	.LVL16:
 485:Src/main.c    ****   osDelay(10000);
 260              		.loc 1 485 0
 261 003c 42F21070 		movw	r0, #10000
 262 0040 FFF7FEFF 		bl	osDelay
 263              	.LVL17:
 486:Src/main.c    ****   HAL_UART_Transmit(&huart2,"AT+CWSAP=\"PYY_8266\",\"12345678\",6,4\r\n",36,10);
 264              		.loc 1 486 0
 265 0044 0A23     		movs	r3, #10
 266 0046 2422     		movs	r2, #36
 267 0048 1A49     		ldr	r1, .L14+24
 268 004a 2046     		mov	r0, r4
 269 004c FFF7FEFF 		bl	HAL_UART_Transmit
 270              	.LVL18:
 487:Src/main.c    ****   osDelay(50);
 271              		.loc 1 487 0
 272 0050 3220     		movs	r0, #50
 273 0052 FFF7FEFF 		bl	osDelay
 274              	.LVL19:
 488:Src/main.c    ****   HAL_UART_Transmit(&huart2,"AT+CIPMUX=1\r\n",13,10);
 275              		.loc 1 488 0
 276 0056 0A23     		movs	r3, #10
 277 0058 0D22     		movs	r2, #13
 278 005a 1749     		ldr	r1, .L14+28
 279 005c 2046     		mov	r0, r4
 280 005e FFF7FEFF 		bl	HAL_UART_Transmit
 281              	.LVL20:
 489:Src/main.c    ****   osDelay(50);
 282              		.loc 1 489 0
 283 0062 3220     		movs	r0, #50
 284 0064 FFF7FEFF 		bl	osDelay
 285              	.LVL21:
 490:Src/main.c    ****   HAL_UART_Transmit(&huart2,"AT+CIPSERVER=1,333\r\n",20,10);
 286              		.loc 1 490 0
 287 0068 0A23     		movs	r3, #10
 288 006a 1422     		movs	r2, #20
 289 006c 1349     		ldr	r1, .L14+32
 290 006e 2046     		mov	r0, r4
 291 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 292              	.LVL22:
 491:Src/main.c    ****   osDelay(10000);
 293              		.loc 1 491 0
 294 0074 42F21070 		movw	r0, #10000
 295 0078 FFF7FEFF 		bl	osDelay
 296              	.LVL23:
 492:Src/main.c    ****   HAL_UART_Transmit(&huart2,"AT+CIFSR\r\n",10,10);
 297              		.loc 1 492 0
 298 007c 0A23     		movs	r3, #10
 299 007e 1A46     		mov	r2, r3
 300 0080 0F49     		ldr	r1, .L14+36
 301 0082 2046     		mov	r0, r4
 302 0084 FFF7FEFF 		bl	HAL_UART_Transmit
 303              	.LVL24:
 493:Src/main.c    ****   osDelay(50);
ARM GAS  /tmp/cc93g7ii.s 			page 15


 304              		.loc 1 493 0
 305 0088 3220     		movs	r0, #50
 306 008a FFF7FEFF 		bl	osDelay
 307              	.LVL25:
 494:Src/main.c    ****   
 495:Src/main.c    ****   HAL_UART_Transmit(&huart3,"\r\nFINISHED\r\n",12,10);
 308              		.loc 1 495 0
 309 008e 0A23     		movs	r3, #10
 310 0090 0C22     		movs	r2, #12
 311 0092 0C49     		ldr	r1, .L14+40
 312 0094 2846     		mov	r0, r5
 313 0096 FFF7FEFF 		bl	HAL_UART_Transmit
 314              	.LVL26:
 315              	.L12:
 316 009a FEE7     		b	.L12
 317              	.L15:
 318              		.align	2
 319              	.L14:
 320 009c 00000000 		.word	huart2
 321 00a0 00000000 		.word	aRxBuffer2
 322 00a4 00000000 		.word	huart3
 323 00a8 00000000 		.word	.LC4
 324 00ac 10000000 		.word	.LC5
 325 00b0 20000000 		.word	.LC6
 326 00b4 2C000000 		.word	.LC7
 327 00b8 54000000 		.word	.LC8
 328 00bc 64000000 		.word	.LC9
 329 00c0 7C000000 		.word	.LC10
 330 00c4 88000000 		.word	.LC11
 331              		.cfi_endproc
 332              	.LFE80:
 334              		.section	.text.uartdamget,"ax",%progbits
 335              		.align	2
 336              		.global	uartdamget
 337              		.thumb
 338              		.thumb_func
 340              	uartdamget:
 341              	.LFB78:
 410:Src/main.c    ****   uint8_t temp[1];
 342              		.loc 1 410 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 8
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346 0000 30B5     		push	{r4, r5, lr}
 347              	.LCFI7:
 348              		.cfi_def_cfa_offset 12
 349              		.cfi_offset 4, -12
 350              		.cfi_offset 5, -8
 351              		.cfi_offset 14, -4
 352 0002 83B0     		sub	sp, sp, #12
 353              	.LCFI8:
 354              		.cfi_def_cfa_offset 24
 412:Src/main.c    **** 
 355              		.loc 1 412 0
 356 0004 0022     		movs	r2, #0
 357 0006 0821     		movs	r1, #8
 358 0008 2148     		ldr	r0, .L24
ARM GAS  /tmp/cc93g7ii.s 			page 16


 359 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 360              	.LVL27:
 414:Src/main.c    ****   {
 361              		.loc 1 414 0
 362 000e 214B     		ldr	r3, .L24+4
 363 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 364 0012 012B     		cmp	r3, #1
 365 0014 2FD1     		bne	.L18
 366 0016 14E0     		b	.L22
 367              	.LVL28:
 368              	.L19:
 369              	.LBB6:
 420:Src/main.c    ****       HAL_UART_Transmit(&huart3,temp,1,10);
 370              		.loc 1 420 0 discriminator 3
 371 0018 01AD     		add	r5, sp, #4
 372 001a 1F4B     		ldr	r3, .L24+8
 373 001c 1A5D     		ldrb	r2, [r3, r4]	@ zero_extendqisi2
 374 001e 1F49     		ldr	r1, .L24+12
 375 0020 2846     		mov	r0, r5
 376 0022 FFF7FEFF 		bl	sprintf
 377              	.LVL29:
 421:Src/main.c    **** 
 378              		.loc 1 421 0 discriminator 3
 379 0026 0A23     		movs	r3, #10
 380 0028 0122     		movs	r2, #1
 381 002a 2946     		mov	r1, r5
 382 002c 1C48     		ldr	r0, .L24+16
 383 002e FFF7FEFF 		bl	HAL_UART_Transmit
 384              	.LVL30:
 423:Src/main.c    ****       HAL_CAN_Transmit(&hcan, 10);      // 用CAN口把数据发出去
 385              		.loc 1 423 0 discriminator 3
 386 0032 1C48     		ldr	r0, .L24+20
 387 0034 036B     		ldr	r3, [r0, #48]
 388 0036 5D75     		strb	r5, [r3, #21]
 424:Src/main.c    **** 	}
 389              		.loc 1 424 0 discriminator 3
 390 0038 0A21     		movs	r1, #10
 391 003a FFF7FEFF 		bl	HAL_CAN_Transmit
 392              	.LVL31:
 417:Src/main.c    **** 	{
 393              		.loc 1 417 0 discriminator 3
 394 003e 0134     		adds	r4, r4, #1
 395              	.LVL32:
 396 0040 00E0     		b	.L17
 397              	.LVL33:
 398              	.L22:
 399              	.LBE6:
 400 0042 0024     		movs	r4, #0
 401              	.L17:
 402              	.LVL34:
 403              	.LBB7:
 417:Src/main.c    **** 	{
 404              		.loc 1 417 0 is_stmt 0 discriminator 1
 405 0044 184B     		ldr	r3, .L24+24
 406 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 407 0048 9C42     		cmp	r4, r3
 408 004a E5DB     		blt	.L19
ARM GAS  /tmp/cc93g7ii.s 			page 17


 409              	.LBE7:
 426:Src/main.c    **** 	/*清空接收缓存区*/
 410              		.loc 1 426 0 is_stmt 1
 411 004c 0A23     		movs	r3, #10
 412 004e 0222     		movs	r2, #2
 413 0050 1649     		ldr	r1, .L24+28
 414 0052 1348     		ldr	r0, .L24+16
 415 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 416              	.LVL35:
 417              	.LBB8:
 428:Src/main.c    **** 	ReceiveBuff[i]=0;
 418              		.loc 1 428 0
 419 0058 0023     		movs	r3, #0
 420 005a 03E0     		b	.L20
 421              	.LVL36:
 422              	.L21:
 429:Src/main.c    **** 	/*接收数据长度清零*/
 423              		.loc 1 429 0 discriminator 3
 424 005c 0021     		movs	r1, #0
 425 005e 0E4A     		ldr	r2, .L24+8
 426 0060 D154     		strb	r1, [r2, r3]
 428:Src/main.c    **** 	ReceiveBuff[i]=0;
 427              		.loc 1 428 0 discriminator 3
 428 0062 0133     		adds	r3, r3, #1
 429              	.LVL37:
 430              	.L20:
 428:Src/main.c    **** 	ReceiveBuff[i]=0;
 431              		.loc 1 428 0 is_stmt 0 discriminator 1
 432 0064 104A     		ldr	r2, .L24+24
 433 0066 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 434 0068 9342     		cmp	r3, r2
 435 006a F7DB     		blt	.L21
 436              	.LBE8:
 431:Src/main.c    **** 	recv_end_flag=0;
 437              		.loc 1 431 0 is_stmt 1
 438 006c 0023     		movs	r3, #0
 439              	.LVL38:
 440 006e 0E4A     		ldr	r2, .L24+24
 441 0070 1370     		strb	r3, [r2]
 432:Src/main.c    ****   }
 442              		.loc 1 432 0
 443 0072 084A     		ldr	r2, .L24+4
 444 0074 1370     		strb	r3, [r2]
 445              	.LVL39:
 446              	.L18:
 435:Src/main.c    **** 
 447              		.loc 1 435 0
 448 0076 FF22     		movs	r2, #255
 449 0078 0749     		ldr	r1, .L24+8
 450 007a 0D48     		ldr	r0, .L24+32
 451 007c FFF7FEFF 		bl	HAL_UART_Receive_DMA
 452              	.LVL40:
 437:Src/main.c    **** }
 453              		.loc 1 437 0
 454 0080 0122     		movs	r2, #1
 455 0082 0821     		movs	r1, #8
 456 0084 0248     		ldr	r0, .L24
ARM GAS  /tmp/cc93g7ii.s 			page 18


 457 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 458              	.LVL41:
 438:Src/main.c    **** /* USER CODE END 4 */
 459              		.loc 1 438 0
 460 008a 03B0     		add	sp, sp, #12
 461              	.LCFI9:
 462              		.cfi_def_cfa_offset 12
 463              		@ sp needed
 464 008c 30BD     		pop	{r4, r5, pc}
 465              	.L25:
 466 008e 00BF     		.align	2
 467              	.L24:
 468 0090 00100140 		.word	1073811456
 469 0094 00000000 		.word	.LANCHOR0
 470 0098 00000000 		.word	ReceiveBuff
 471 009c 98000000 		.word	.LC12
 472 00a0 00000000 		.word	huart3
 473 00a4 00000000 		.word	hcan
 474 00a8 00000000 		.word	Rx_len
 475 00ac 9C000000 		.word	.LC13
 476 00b0 00000000 		.word	huart2
 477              		.cfi_endproc
 478              	.LFE78:
 480              		.section	.text.Func_Task0,"ax",%progbits
 481              		.align	2
 482              		.global	Func_Task0
 483              		.thumb
 484              		.thumb_func
 486              	Func_Task0:
 487              	.LFB79:
 443:Src/main.c    **** 
 488              		.loc 1 443 0
 489              		.cfi_startproc
 490              		@ Volatile: function does not return.
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              	.LVL42:
 494 0000 08B5     		push	{r3, lr}
 495              	.LCFI10:
 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 3, -8
 498              		.cfi_offset 14, -4
 446:Src/main.c    ****   
 499              		.loc 1 446 0
 500 0002 114C     		ldr	r4, .L29
 501 0004 114B     		ldr	r3, .L29+4
 502 0006 2363     		str	r3, [r4, #48]
 448:Src/main.c    ****   
 503              		.loc 1 448 0
 504 0008 0A23     		movs	r3, #10
 505 000a 0E22     		movs	r2, #14
 506 000c 1049     		ldr	r1, .L29+8
 507 000e 1148     		ldr	r0, .L29+12
 508              	.LVL43:
 509 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 510              	.LVL44:
 451:Src/main.c    ****   hcan.pTxMsg -> RTR = CAN_RTR_DATA;
ARM GAS  /tmp/cc93g7ii.s 			page 19


 511              		.loc 1 451 0
 512 0014 236B     		ldr	r3, [r4, #48]
 513 0016 41F21432 		movw	r2, #4884
 514 001a 5A60     		str	r2, [r3, #4]
 452:Src/main.c    ****   hcan.pTxMsg -> IDE = CAN_ID_EXT;
 515              		.loc 1 452 0
 516 001c 236B     		ldr	r3, [r4, #48]
 517 001e 0022     		movs	r2, #0
 518 0020 DA60     		str	r2, [r3, #12]
 453:Src/main.c    ****   hcan.pTxMsg -> DLC = 2;
 519              		.loc 1 453 0
 520 0022 236B     		ldr	r3, [r4, #48]
 521 0024 0422     		movs	r2, #4
 522 0026 9A60     		str	r2, [r3, #8]
 454:Src/main.c    ****   hcan.pTxMsg -> Data[0] = 0xAB;
 523              		.loc 1 454 0
 524 0028 236B     		ldr	r3, [r4, #48]
 525 002a 0222     		movs	r2, #2
 526 002c 1A61     		str	r2, [r3, #16]
 455:Src/main.c    ****   hcan.pTxMsg -> Data[1] = 0xCD;
 527              		.loc 1 455 0
 528 002e 236B     		ldr	r3, [r4, #48]
 529 0030 AB22     		movs	r2, #171
 530 0032 1A75     		strb	r2, [r3, #20]
 456:Src/main.c    **** 
 531              		.loc 1 456 0
 532 0034 236B     		ldr	r3, [r4, #48]
 533 0036 CD22     		movs	r2, #205
 534 0038 5A75     		strb	r2, [r3, #21]
 458:Src/main.c    ****   /* Infinite loop */
 535              		.loc 1 458 0
 536 003a 0A21     		movs	r1, #10
 537 003c 2046     		mov	r0, r4
 538 003e FFF7FEFF 		bl	HAL_CAN_Transmit
 539              	.LVL45:
 540              	.L27:
 470:Src/main.c    ****   }
 541              		.loc 1 470 0 discriminator 1
 542 0042 FFF7FEFF 		bl	uartdamget
 543              	.LVL46:
 544 0046 FCE7     		b	.L27
 545              	.L30:
 546              		.align	2
 547              	.L29:
 548 0048 00000000 		.word	hcan
 549 004c 00000000 		.word	TxMessage
 550 0050 A0000000 		.word	.LC14
 551 0054 00000000 		.word	huart1
 552              		.cfi_endproc
 553              	.LFE79:
 555              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 556              		.align	2
 557              		.global	HAL_TIM_PeriodElapsedCallback
 558              		.thumb
 559              		.thumb_func
 561              	HAL_TIM_PeriodElapsedCallback:
 562              	.LFB81:
ARM GAS  /tmp/cc93g7ii.s 			page 20


 496:Src/main.c    ****   /* Infinite loop */
 497:Src/main.c    ****   for(;;)
 498:Src/main.c    ****   {
 499:Src/main.c    ****     // osDelay(1000);
 500:Src/main.c    ****     // if (aRxBuffer2_Data_flag == 1)
 501:Src/main.c    ****     //   HAL_UART_Transmit(&huart3,aRxBuffer2_Data,4,10);
 502:Src/main.c    ****     // HAL_UART_Transmit(&huart3,"\r\nFunc_Task1_Loop\r\n",19,10);
 503:Src/main.c    ****   }
 504:Src/main.c    ****   /* USER CODE END Func_Task1 */
 505:Src/main.c    **** }
 506:Src/main.c    **** 
 507:Src/main.c    **** /**
 508:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 509:Src/main.c    ****   * @note   This function is called  when TIM4 interrupt took place, inside
 510:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 511:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 512:Src/main.c    ****   * @param  htim : TIM handle
 513:Src/main.c    ****   * @retval None
 514:Src/main.c    ****   */
 515:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 516:Src/main.c    **** {
 563              		.loc 1 516 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 0, uses_anonymous_args = 0
 567              	.LVL47:
 568 0000 08B5     		push	{r3, lr}
 569              	.LCFI11:
 570              		.cfi_def_cfa_offset 8
 571              		.cfi_offset 3, -8
 572              		.cfi_offset 14, -4
 517:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 518:Src/main.c    **** 
 519:Src/main.c    ****   /* USER CODE END Callback 0 */
 520:Src/main.c    ****   if (htim->Instance == TIM4) {
 573              		.loc 1 520 0
 574 0002 0268     		ldr	r2, [r0]
 575 0004 024B     		ldr	r3, .L34
 576 0006 9A42     		cmp	r2, r3
 577 0008 01D1     		bne	.L31
 521:Src/main.c    ****     HAL_IncTick();
 578              		.loc 1 521 0
 579 000a FFF7FEFF 		bl	HAL_IncTick
 580              	.LVL48:
 581              	.L31:
 582 000e 08BD     		pop	{r3, pc}
 583              	.L35:
 584              		.align	2
 585              	.L34:
 586 0010 00080040 		.word	1073743872
 587              		.cfi_endproc
 588              	.LFE81:
 590              		.section	.text._Error_Handler,"ax",%progbits
 591              		.align	2
 592              		.global	_Error_Handler
 593              		.thumb
 594              		.thumb_func
ARM GAS  /tmp/cc93g7ii.s 			page 21


 596              	_Error_Handler:
 597              	.LFB82:
 522:Src/main.c    ****   }
 523:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 524:Src/main.c    **** 
 525:Src/main.c    ****   /* USER CODE END Callback 1 */
 526:Src/main.c    **** }
 527:Src/main.c    **** 
 528:Src/main.c    **** /**
 529:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 530:Src/main.c    ****   * @param  file: The file name as string.
 531:Src/main.c    ****   * @param  line: The line in file as a number.
 532:Src/main.c    ****   * @retval None
 533:Src/main.c    ****   */
 534:Src/main.c    **** void _Error_Handler(char *file, int line)
 535:Src/main.c    **** {
 598              		.loc 1 535 0
 599              		.cfi_startproc
 600              		@ Volatile: function does not return.
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              		@ link register save eliminated.
 604              	.LVL49:
 605              	.L37:
 606 0000 FEE7     		b	.L37
 607              		.cfi_endproc
 608              	.LFE82:
 610 0002 00BF     		.section	.text.MX_CAN_Init,"ax",%progbits
 611              		.align	2
 612              		.thumb
 613              		.thumb_func
 615              	MX_CAN_Init:
 616              	.LFB72:
 273:Src/main.c    **** 
 617              		.loc 1 273 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 273:Src/main.c    **** 
 621              		.loc 1 273 0
 622 0000 08B5     		push	{r3, lr}
 623              	.LCFI12:
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 3, -8
 626              		.cfi_offset 14, -4
 275:Src/main.c    ****   hcan.Init.Prescaler = 18;
 627              		.loc 1 275 0
 628 0002 0E48     		ldr	r0, .L41
 629 0004 0E4B     		ldr	r3, .L41+4
 630 0006 0360     		str	r3, [r0]
 276:Src/main.c    ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 631              		.loc 1 276 0
 632 0008 1223     		movs	r3, #18
 633 000a 4360     		str	r3, [r0, #4]
 277:Src/main.c    ****   hcan.Init.SJW = CAN_SJW_1TQ;
 634              		.loc 1 277 0
 635 000c 0023     		movs	r3, #0
ARM GAS  /tmp/cc93g7ii.s 			page 22


 636 000e 8360     		str	r3, [r0, #8]
 278:Src/main.c    ****   hcan.Init.BS1 = CAN_BS1_7TQ;
 637              		.loc 1 278 0
 638 0010 C360     		str	r3, [r0, #12]
 279:Src/main.c    ****   hcan.Init.BS2 = CAN_BS2_8TQ;
 639              		.loc 1 279 0
 640 0012 4FF4C022 		mov	r2, #393216
 641 0016 0261     		str	r2, [r0, #16]
 280:Src/main.c    ****   hcan.Init.TTCM = DISABLE;
 642              		.loc 1 280 0
 643 0018 4FF4E002 		mov	r2, #7340032
 644 001c 4261     		str	r2, [r0, #20]
 281:Src/main.c    ****   hcan.Init.ABOM = DISABLE;
 645              		.loc 1 281 0
 646 001e 8361     		str	r3, [r0, #24]
 282:Src/main.c    ****   hcan.Init.AWUM = DISABLE;
 647              		.loc 1 282 0
 648 0020 C361     		str	r3, [r0, #28]
 283:Src/main.c    ****   hcan.Init.NART = DISABLE;
 649              		.loc 1 283 0
 650 0022 0362     		str	r3, [r0, #32]
 284:Src/main.c    ****   hcan.Init.RFLM = DISABLE;
 651              		.loc 1 284 0
 652 0024 4362     		str	r3, [r0, #36]
 285:Src/main.c    ****   hcan.Init.TXFP = DISABLE;
 653              		.loc 1 285 0
 654 0026 8362     		str	r3, [r0, #40]
 286:Src/main.c    ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 655              		.loc 1 286 0
 656 0028 C362     		str	r3, [r0, #44]
 287:Src/main.c    ****   {
 657              		.loc 1 287 0
 658 002a FFF7FEFF 		bl	HAL_CAN_Init
 659              	.LVL50:
 660 002e 20B1     		cbz	r0, .L38
 289:Src/main.c    ****   }
 661              		.loc 1 289 0
 662 0030 40F22111 		movw	r1, #289
 663 0034 0348     		ldr	r0, .L41+8
 664 0036 FFF7FEFF 		bl	_Error_Handler
 665              	.LVL51:
 666              	.L38:
 667 003a 08BD     		pop	{r3, pc}
 668              	.L42:
 669              		.align	2
 670              	.L41:
 671 003c 00000000 		.word	hcan
 672 0040 00640040 		.word	1073767424
 673 0044 B0000000 		.word	.LC15
 674              		.cfi_endproc
 675              	.LFE72:
 677              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 678              		.align	2
 679              		.thumb
 680              		.thumb_func
 682              	MX_USART1_UART_Init:
 683              	.LFB73:
ARM GAS  /tmp/cc93g7ii.s 			page 23


 296:Src/main.c    **** 
 684              		.loc 1 296 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688 0000 08B5     		push	{r3, lr}
 689              	.LCFI13:
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 3, -8
 692              		.cfi_offset 14, -4
 298:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 693              		.loc 1 298 0
 694 0002 0B48     		ldr	r0, .L46
 695 0004 0B4B     		ldr	r3, .L46+4
 696 0006 0360     		str	r3, [r0]
 299:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 697              		.loc 1 299 0
 698 0008 4FF4E133 		mov	r3, #115200
 699 000c 4360     		str	r3, [r0, #4]
 300:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 700              		.loc 1 300 0
 701 000e 0023     		movs	r3, #0
 702 0010 8360     		str	r3, [r0, #8]
 301:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 703              		.loc 1 301 0
 704 0012 C360     		str	r3, [r0, #12]
 302:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 705              		.loc 1 302 0
 706 0014 0361     		str	r3, [r0, #16]
 303:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 707              		.loc 1 303 0
 708 0016 0C22     		movs	r2, #12
 709 0018 4261     		str	r2, [r0, #20]
 304:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 710              		.loc 1 304 0
 711 001a 8361     		str	r3, [r0, #24]
 305:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 712              		.loc 1 305 0
 713 001c C361     		str	r3, [r0, #28]
 306:Src/main.c    ****   {
 714              		.loc 1 306 0
 715 001e FFF7FEFF 		bl	HAL_UART_Init
 716              	.LVL52:
 717 0022 20B1     		cbz	r0, .L43
 308:Src/main.c    ****   }
 718              		.loc 1 308 0
 719 0024 4FF49A71 		mov	r1, #308
 720 0028 0348     		ldr	r0, .L46+8
 721 002a FFF7FEFF 		bl	_Error_Handler
 722              	.LVL53:
 723              	.L43:
 724 002e 08BD     		pop	{r3, pc}
 725              	.L47:
 726              		.align	2
 727              	.L46:
 728 0030 00000000 		.word	huart1
 729 0034 00380140 		.word	1073821696
ARM GAS  /tmp/cc93g7ii.s 			page 24


 730 0038 B0000000 		.word	.LC15
 731              		.cfi_endproc
 732              	.LFE73:
 734              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 735              		.align	2
 736              		.thumb
 737              		.thumb_func
 739              	MX_USART2_UART_Init:
 740              	.LFB74:
 315:Src/main.c    **** 
 741              		.loc 1 315 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 745 0000 08B5     		push	{r3, lr}
 746              	.LCFI14:
 747              		.cfi_def_cfa_offset 8
 748              		.cfi_offset 3, -8
 749              		.cfi_offset 14, -4
 317:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 750              		.loc 1 317 0
 751 0002 0B48     		ldr	r0, .L51
 752 0004 0B4B     		ldr	r3, .L51+4
 753 0006 0360     		str	r3, [r0]
 318:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 754              		.loc 1 318 0
 755 0008 4FF4E133 		mov	r3, #115200
 756 000c 4360     		str	r3, [r0, #4]
 319:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 757              		.loc 1 319 0
 758 000e 0023     		movs	r3, #0
 759 0010 8360     		str	r3, [r0, #8]
 320:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 760              		.loc 1 320 0
 761 0012 C360     		str	r3, [r0, #12]
 321:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 762              		.loc 1 321 0
 763 0014 0361     		str	r3, [r0, #16]
 322:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 764              		.loc 1 322 0
 765 0016 0C22     		movs	r2, #12
 766 0018 4261     		str	r2, [r0, #20]
 323:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 767              		.loc 1 323 0
 768 001a 8361     		str	r3, [r0, #24]
 324:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 769              		.loc 1 324 0
 770 001c C361     		str	r3, [r0, #28]
 325:Src/main.c    ****   {
 771              		.loc 1 325 0
 772 001e FFF7FEFF 		bl	HAL_UART_Init
 773              	.LVL54:
 774 0022 20B1     		cbz	r0, .L48
 327:Src/main.c    ****   }
 775              		.loc 1 327 0
 776 0024 40F24711 		movw	r1, #327
 777 0028 0348     		ldr	r0, .L51+8
ARM GAS  /tmp/cc93g7ii.s 			page 25


 778 002a FFF7FEFF 		bl	_Error_Handler
 779              	.LVL55:
 780              	.L48:
 781 002e 08BD     		pop	{r3, pc}
 782              	.L52:
 783              		.align	2
 784              	.L51:
 785 0030 00000000 		.word	huart2
 786 0034 00440040 		.word	1073759232
 787 0038 B0000000 		.word	.LC15
 788              		.cfi_endproc
 789              	.LFE74:
 791              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 792              		.align	2
 793              		.thumb
 794              		.thumb_func
 796              	MX_USART3_UART_Init:
 797              	.LFB75:
 334:Src/main.c    **** 
 798              		.loc 1 334 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802 0000 08B5     		push	{r3, lr}
 803              	.LCFI15:
 804              		.cfi_def_cfa_offset 8
 805              		.cfi_offset 3, -8
 806              		.cfi_offset 14, -4
 336:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 807              		.loc 1 336 0
 808 0002 0B48     		ldr	r0, .L56
 809 0004 0B4B     		ldr	r3, .L56+4
 810 0006 0360     		str	r3, [r0]
 337:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 811              		.loc 1 337 0
 812 0008 4FF4E133 		mov	r3, #115200
 813 000c 4360     		str	r3, [r0, #4]
 338:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 814              		.loc 1 338 0
 815 000e 0023     		movs	r3, #0
 816 0010 8360     		str	r3, [r0, #8]
 339:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 817              		.loc 1 339 0
 818 0012 C360     		str	r3, [r0, #12]
 340:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 819              		.loc 1 340 0
 820 0014 0361     		str	r3, [r0, #16]
 341:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 821              		.loc 1 341 0
 822 0016 0C22     		movs	r2, #12
 823 0018 4261     		str	r2, [r0, #20]
 342:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 824              		.loc 1 342 0
 825 001a 8361     		str	r3, [r0, #24]
 343:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 826              		.loc 1 343 0
 827 001c C361     		str	r3, [r0, #28]
ARM GAS  /tmp/cc93g7ii.s 			page 26


 344:Src/main.c    ****   {
 828              		.loc 1 344 0
 829 001e FFF7FEFF 		bl	HAL_UART_Init
 830              	.LVL56:
 831 0022 20B1     		cbz	r0, .L53
 346:Src/main.c    ****   }
 832              		.loc 1 346 0
 833 0024 4FF4AD71 		mov	r1, #346
 834 0028 0348     		ldr	r0, .L56+8
 835 002a FFF7FEFF 		bl	_Error_Handler
 836              	.LVL57:
 837              	.L53:
 838 002e 08BD     		pop	{r3, pc}
 839              	.L57:
 840              		.align	2
 841              	.L56:
 842 0030 00000000 		.word	huart3
 843 0034 00480040 		.word	1073760256
 844 0038 B0000000 		.word	.LC15
 845              		.cfi_endproc
 846              	.LFE75:
 848              		.section	.text.SystemClock_Config,"ax",%progbits
 849              		.align	2
 850              		.global	SystemClock_Config
 851              		.thumb
 852              		.thumb_func
 854              	SystemClock_Config:
 855              	.LFB70:
 206:Src/main.c    **** 
 856              		.loc 1 206 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 64
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860 0000 00B5     		push	{lr}
 861              	.LCFI16:
 862              		.cfi_def_cfa_offset 4
 863              		.cfi_offset 14, -4
 864 0002 91B0     		sub	sp, sp, #68
 865              	.LCFI17:
 866              		.cfi_def_cfa_offset 72
 213:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 867              		.loc 1 213 0
 868 0004 0122     		movs	r2, #1
 869 0006 0692     		str	r2, [sp, #24]
 214:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 870              		.loc 1 214 0
 871 0008 4FF48033 		mov	r3, #65536
 872 000c 0793     		str	r3, [sp, #28]
 215:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 873              		.loc 1 215 0
 874 000e 0021     		movs	r1, #0
 875 0010 0891     		str	r1, [sp, #32]
 216:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 876              		.loc 1 216 0
 877 0012 0A92     		str	r2, [sp, #40]
 217:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 878              		.loc 1 217 0
ARM GAS  /tmp/cc93g7ii.s 			page 27


 879 0014 0222     		movs	r2, #2
 880 0016 0D92     		str	r2, [sp, #52]
 218:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 881              		.loc 1 218 0
 882 0018 0E93     		str	r3, [sp, #56]
 219:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 883              		.loc 1 219 0
 884 001a 4FF4E013 		mov	r3, #1835008
 885 001e 0F93     		str	r3, [sp, #60]
 220:Src/main.c    ****   {
 886              		.loc 1 220 0
 887 0020 06A8     		add	r0, sp, #24
 888 0022 FFF7FEFF 		bl	HAL_RCC_OscConfig
 889              	.LVL58:
 890 0026 18B1     		cbz	r0, .L59
 222:Src/main.c    ****   }
 891              		.loc 1 222 0
 892 0028 DE21     		movs	r1, #222
 893 002a 1448     		ldr	r0, .L62
 894 002c FFF7FEFF 		bl	_Error_Handler
 895              	.LVL59:
 896              	.L59:
 227:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 897              		.loc 1 227 0
 898 0030 0F23     		movs	r3, #15
 899 0032 0193     		str	r3, [sp, #4]
 229:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 900              		.loc 1 229 0
 901 0034 0221     		movs	r1, #2
 902 0036 0291     		str	r1, [sp, #8]
 230:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 903              		.loc 1 230 0
 904 0038 0023     		movs	r3, #0
 905 003a 0393     		str	r3, [sp, #12]
 231:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 906              		.loc 1 231 0
 907 003c 4FF48062 		mov	r2, #1024
 908 0040 0492     		str	r2, [sp, #16]
 232:Src/main.c    **** 
 909              		.loc 1 232 0
 910 0042 0593     		str	r3, [sp, #20]
 234:Src/main.c    ****   {
 911              		.loc 1 234 0
 912 0044 01A8     		add	r0, sp, #4
 913 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 914              	.LVL60:
 915 004a 18B1     		cbz	r0, .L60
 236:Src/main.c    ****   }
 916              		.loc 1 236 0
 917 004c EC21     		movs	r1, #236
 918 004e 0B48     		ldr	r0, .L62
 919 0050 FFF7FEFF 		bl	_Error_Handler
 920              	.LVL61:
 921              	.L60:
 241:Src/main.c    **** 
 922              		.loc 1 241 0
 923 0054 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
ARM GAS  /tmp/cc93g7ii.s 			page 28


 924              	.LVL62:
 925 0058 094B     		ldr	r3, .L62+4
 926 005a A3FB0030 		umull	r3, r0, r3, r0
 927 005e 8009     		lsrs	r0, r0, #6
 928 0060 FFF7FEFF 		bl	HAL_SYSTICK_Config
 929              	.LVL63:
 245:Src/main.c    **** 
 930              		.loc 1 245 0
 931 0064 0420     		movs	r0, #4
 932 0066 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 933              	.LVL64:
 248:Src/main.c    **** }
 934              		.loc 1 248 0
 935 006a 0022     		movs	r2, #0
 936 006c 0F21     		movs	r1, #15
 937 006e 4FF0FF30 		mov	r0, #-1
 938 0072 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 939              	.LVL65:
 249:Src/main.c    **** 
 940              		.loc 1 249 0
 941 0076 11B0     		add	sp, sp, #68
 942              	.LCFI18:
 943              		.cfi_def_cfa_offset 4
 944              		@ sp needed
 945 0078 5DF804FB 		ldr	pc, [sp], #4
 946              	.L63:
 947              		.align	2
 948              	.L62:
 949 007c B0000000 		.word	.LC15
 950 0080 D34D6210 		.word	274877907
 951              		.cfi_endproc
 952              	.LFE70:
 954              		.section	.text.main,"ax",%progbits
 955              		.align	2
 956              		.global	main
 957              		.thumb
 958              		.thumb_func
 960              	main:
 961              	.LFB69:
 115:Src/main.c    ****   /* USER CODE BEGIN 1 */
 962              		.loc 1 115 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 40
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966 0000 70B5     		push	{r4, r5, r6, lr}
 967              	.LCFI19:
 968              		.cfi_def_cfa_offset 16
 969              		.cfi_offset 4, -16
 970              		.cfi_offset 5, -12
 971              		.cfi_offset 6, -8
 972              		.cfi_offset 14, -4
 973 0002 8AB0     		sub	sp, sp, #40
 974              	.LCFI20:
 975              		.cfi_def_cfa_offset 56
 123:Src/main.c    **** 
 976              		.loc 1 123 0
 977 0004 FFF7FEFF 		bl	HAL_Init
ARM GAS  /tmp/cc93g7ii.s 			page 29


 978              	.LVL66:
 130:Src/main.c    **** 
 979              		.loc 1 130 0
 980 0008 FFF7FEFF 		bl	SystemClock_Config
 981              	.LVL67:
 137:Src/main.c    ****   MX_DMA_Init();
 982              		.loc 1 137 0
 983 000c FFF7FEFF 		bl	MX_GPIO_Init
 984              	.LVL68:
 138:Src/main.c    ****   MX_CAN_Init();
 985              		.loc 1 138 0
 986 0010 FFF7FEFF 		bl	MX_DMA_Init
 987              	.LVL69:
 139:Src/main.c    ****   MX_USART1_UART_Init();
 988              		.loc 1 139 0
 989 0014 FFF7FEFF 		bl	MX_CAN_Init
 990              	.LVL70:
 140:Src/main.c    ****   MX_USART2_UART_Init();
 991              		.loc 1 140 0
 992 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
 993              	.LVL71:
 141:Src/main.c    ****   MX_USART3_UART_Init();
 994              		.loc 1 141 0
 995 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 996              	.LVL72:
 142:Src/main.c    **** 
 997              		.loc 1 142 0
 998 0020 FFF7FEFF 		bl	MX_USART3_UART_Init
 999              	.LVL73:
 145:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1000              		.loc 1 145 0
 1001 0024 FFF7FEFF 		bl	MX_NVIC_Init
 1002              	.LVL74:
 147:Src/main.c    ****   /*        使能串口2 IDLE中断        */
 1003              		.loc 1 147 0
 1004 0028 0A23     		movs	r3, #10
 1005 002a 0522     		movs	r2, #5
 1006 002c 1249     		ldr	r1, .L67
 1007 002e 1348     		ldr	r0, .L67+4
 1008 0030 FFF7FEFF 		bl	HAL_UART_Transmit
 1009              	.LVL75:
 149:Src/main.c    ****   /* USER CODE END 2 */
 1010              		.loc 1 149 0
 1011 0034 124B     		ldr	r3, .L67+8
 1012 0036 1A68     		ldr	r2, [r3]
 1013 0038 D368     		ldr	r3, [r2, #12]
 1014 003a 43F01003 		orr	r3, r3, #16
 1015 003e D360     		str	r3, [r2, #12]
 166:Src/main.c    ****   Task0Handle = osThreadCreate(osThread(Task0), NULL);
 1016              		.loc 1 166 0
 1017 0040 104C     		ldr	r4, .L67+12
 1018 0042 05AD     		add	r5, sp, #20
 1019 0044 2646     		mov	r6, r4
 1020 0046 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1021 0048 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1022 004a 3368     		ldr	r3, [r6]
 1023 004c 2B60     		str	r3, [r5]
ARM GAS  /tmp/cc93g7ii.s 			page 30


 167:Src/main.c    **** 
 1024              		.loc 1 167 0
 1025 004e 0021     		movs	r1, #0
 1026 0050 05A8     		add	r0, sp, #20
 1027 0052 FFF7FEFF 		bl	osThreadCreate
 1028              	.LVL76:
 1029 0056 0C4B     		ldr	r3, .L67+16
 1030 0058 1860     		str	r0, [r3]
 170:Src/main.c    ****   Task1Handle = osThreadCreate(osThread(Task1), NULL);
 1031              		.loc 1 170 0
 1032 005a 6D46     		mov	r5, sp
 1033 005c 1434     		adds	r4, r4, #20
 1034 005e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1035 0060 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1036 0062 2368     		ldr	r3, [r4]
 1037 0064 2B60     		str	r3, [r5]
 171:Src/main.c    **** 
 1038              		.loc 1 171 0
 1039 0066 0021     		movs	r1, #0
 1040 0068 6846     		mov	r0, sp
 1041 006a FFF7FEFF 		bl	osThreadCreate
 1042              	.LVL77:
 1043 006e 074B     		ldr	r3, .L67+20
 1044 0070 1860     		str	r0, [r3]
 183:Src/main.c    ****   
 1045              		.loc 1 183 0
 1046 0072 FFF7FEFF 		bl	osKernelStart
 1047              	.LVL78:
 1048              	.L65:
 1049 0076 FEE7     		b	.L65
 1050              	.L68:
 1051              		.align	2
 1052              	.L67:
 1053 0078 BC000000 		.word	.LC16
 1054 007c 00000000 		.word	huart3
 1055 0080 00000000 		.word	huart2
 1056 0084 00000000 		.word	.LANCHOR1
 1057 0088 00000000 		.word	Task0Handle
 1058 008c 00000000 		.word	Task1Handle
 1059              		.cfi_endproc
 1060              	.LFE69:
 1062              		.comm	Rx_len,1,1
 1063              		.global	recv_end_flag
 1064              		.comm	ReceiveBuff,255,4
 1065              		.global	aRxBuffer2_Data_Index
 1066              		.global	aRxBuffer2_Data_flag
 1067              		.comm	aRxBuffer2_Data,4,4
 1068              		.comm	aRxBuffer3,1,4
 1069              		.comm	aRxBuffer2,1,4
 1070              		.comm	aRxBuffer1,1,4
 1071              		.comm	RxMessage,36,4
 1072              		.comm	TxMessage,28,4
 1073              		.comm	sFliterConfig,40,4
 1074              		.comm	Task1Handle,4,4
 1075              		.comm	Task0Handle,4,4
 1076              		.comm	hdma_usart2_rx,68,4
 1077              		.comm	huart3,64,4
ARM GAS  /tmp/cc93g7ii.s 			page 31


 1078              		.comm	huart2,64,4
 1079              		.comm	huart1,64,4
 1080              		.comm	hcan,68,4
 1081              		.section	.rodata
 1082              		.align	2
 1083              		.set	.LANCHOR1,. + 0
 1084              	.LC17:
 1085 0000 CC000000 		.word	.LC0
 1086 0004 00000000 		.word	Func_Task0
 1087 0008 0000     		.short	0
 1088 000a 0000     		.space	2
 1089 000c 00000000 		.word	0
 1090 0010 00010000 		.word	256
 1091              	.LC18:
 1092 0014 C4000000 		.word	.LC2
 1093 0018 00000000 		.word	Func_Task1
 1094 001c 0000     		.short	0
 1095 001e 0000     		.space	2
 1096 0020 00000000 		.word	0
 1097 0024 00010000 		.word	256
 1098              		.section	.bss.aRxBuffer2_Data_flag,"aw",%nobits
 1101              	aRxBuffer2_Data_flag:
 1102 0000 00       		.space	1
 1103              		.section	.rodata.str1.4,"aMS",%progbits,1
 1104              		.align	2
 1105              	.LC4:
 1106 0000 0D0A4675 		.ascii	"\015\012Func_Task1\015\012\000"
 1106      6E635F54 
 1106      61736B31 
 1106      0D0A00
 1107 000f 00       		.space	1
 1108              	.LC5:
 1109 0010 41542B43 		.ascii	"AT+CWMODE=2\015\012\000"
 1109      574D4F44 
 1109      453D320D 
 1109      0A00
 1110 001e 0000     		.space	2
 1111              	.LC6:
 1112 0020 41542B52 		.ascii	"AT+RST\015\012\000"
 1112      53540D0A 
 1112      00
 1113 0029 000000   		.space	3
 1114              	.LC7:
 1115 002c 41542B43 		.ascii	"AT+CWSAP=\"PYY_8266\",\"12345678\",6,4\015\012\000"
 1115      57534150 
 1115      3D225059 
 1115      595F3832 
 1115      3636222C 
 1116 0051 000000   		.space	3
 1117              	.LC8:
 1118 0054 41542B43 		.ascii	"AT+CIPMUX=1\015\012\000"
 1118      49504D55 
 1118      583D310D 
 1118      0A00
 1119 0062 0000     		.space	2
 1120              	.LC9:
 1121 0064 41542B43 		.ascii	"AT+CIPSERVER=1,333\015\012\000"
ARM GAS  /tmp/cc93g7ii.s 			page 32


 1121      49505345 
 1121      52564552 
 1121      3D312C33 
 1121      33330D0A 
 1122 0079 000000   		.space	3
 1123              	.LC10:
 1124 007c 41542B43 		.ascii	"AT+CIFSR\015\012\000"
 1124      49465352 
 1124      0D0A00
 1125 0087 00       		.space	1
 1126              	.LC11:
 1127 0088 0D0A4649 		.ascii	"\015\012FINISHED\015\012\000"
 1127      4E495348 
 1127      45440D0A 
 1127      00
 1128 0095 000000   		.space	3
 1129              	.LC12:
 1130 0098 256300   		.ascii	"%c\000"
 1131 009b 00       		.space	1
 1132              	.LC13:
 1133 009c 0D0A00   		.ascii	"\015\012\000"
 1134 009f 00       		.space	1
 1135              	.LC14:
 1136 00a0 0D0A4675 		.ascii	"\015\012Func_Task0\015\012\000"
 1136      6E635F54 
 1136      61736B30 
 1136      0D0A00
 1137 00af 00       		.space	1
 1138              	.LC15:
 1139 00b0 5372632F 		.ascii	"Src/main.c\000"
 1139      6D61696E 
 1139      2E6300
 1140 00bb 00       		.space	1
 1141              	.LC16:
 1142 00bc 444D410D 		.ascii	"DMA\015\012\000"
 1142      0A00
 1143 00c2 0000     		.space	2
 1144              	.LC2:
 1145 00c4 5461736B 		.ascii	"Task1\000"
 1145      3100
 1146 00ca 0000     		.space	2
 1147              	.LC0:
 1148 00cc 5461736B 		.ascii	"Task0\000"
 1148      3000
 1149              		.section	.bss.aRxBuffer2_Data_Index,"aw",%nobits
 1152              	aRxBuffer2_Data_Index:
 1153 0000 00       		.space	1
 1154              		.section	.bss.recv_end_flag,"aw",%nobits
 1155              		.set	.LANCHOR0,. + 0
 1158              	recv_end_flag:
 1159 0000 00       		.space	1
 1160              		.text
 1161              	.Letext0:
 1162              		.file 2 "/home/user/Library/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_ty
 1163              		.file 3 "/home/user/Library/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1164              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1165              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
ARM GAS  /tmp/cc93g7ii.s 			page 33


 1166              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1167              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1168              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1169              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1170              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1171              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1172              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can_ex.h"
 1173              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1174              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1175              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1176              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1177              		.file 17 "Drivers/CMSIS/Include/core_cm3.h"
 1178              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1179              		.file 19 "/home/user/Library/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/stdio.h"
 1180              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/cc93g7ii.s 			page 34


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc93g7ii.s:20     .text.MX_DMA_Init:00000000 $t
     /tmp/cc93g7ii.s:24     .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/cc93g7ii.s:55     .text.MX_DMA_Init:0000001c $d
     /tmp/cc93g7ii.s:60     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc93g7ii.s:64     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc93g7ii.s:142    .text.MX_GPIO_Init:00000064 $d
     /tmp/cc93g7ii.s:148    .text.MX_NVIC_Init:00000000 $t
     /tmp/cc93g7ii.s:152    .text.MX_NVIC_Init:00000000 MX_NVIC_Init
     /tmp/cc93g7ii.s:208    .text.Func_Task1:00000000 $t
     /tmp/cc93g7ii.s:213    .text.Func_Task1:00000000 Func_Task1
     /tmp/cc93g7ii.s:320    .text.Func_Task1:0000009c $d
                            *COM*:00000040 huart2
                            *COM*:00000001 aRxBuffer2
                            *COM*:00000040 huart3
     /tmp/cc93g7ii.s:335    .text.uartdamget:00000000 $t
     /tmp/cc93g7ii.s:340    .text.uartdamget:00000000 uartdamget
     /tmp/cc93g7ii.s:468    .text.uartdamget:00000090 $d
                            *COM*:000000ff ReceiveBuff
                            *COM*:00000044 hcan
                            *COM*:00000001 Rx_len
     /tmp/cc93g7ii.s:481    .text.Func_Task0:00000000 $t
     /tmp/cc93g7ii.s:486    .text.Func_Task0:00000000 Func_Task0
     /tmp/cc93g7ii.s:548    .text.Func_Task0:00000048 $d
                            *COM*:0000001c TxMessage
                            *COM*:00000040 huart1
     /tmp/cc93g7ii.s:556    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/cc93g7ii.s:561    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc93g7ii.s:586    .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
     /tmp/cc93g7ii.s:591    .text._Error_Handler:00000000 $t
     /tmp/cc93g7ii.s:596    .text._Error_Handler:00000000 _Error_Handler
     /tmp/cc93g7ii.s:611    .text.MX_CAN_Init:00000000 $t
     /tmp/cc93g7ii.s:615    .text.MX_CAN_Init:00000000 MX_CAN_Init
     /tmp/cc93g7ii.s:671    .text.MX_CAN_Init:0000003c $d
     /tmp/cc93g7ii.s:678    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/cc93g7ii.s:682    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/cc93g7ii.s:728    .text.MX_USART1_UART_Init:00000030 $d
     /tmp/cc93g7ii.s:735    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/cc93g7ii.s:739    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/cc93g7ii.s:785    .text.MX_USART2_UART_Init:00000030 $d
     /tmp/cc93g7ii.s:792    .text.MX_USART3_UART_Init:00000000 $t
     /tmp/cc93g7ii.s:796    .text.MX_USART3_UART_Init:00000000 MX_USART3_UART_Init
     /tmp/cc93g7ii.s:842    .text.MX_USART3_UART_Init:00000030 $d
     /tmp/cc93g7ii.s:849    .text.SystemClock_Config:00000000 $t
     /tmp/cc93g7ii.s:854    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc93g7ii.s:949    .text.SystemClock_Config:0000007c $d
     /tmp/cc93g7ii.s:955    .text.main:00000000 $t
     /tmp/cc93g7ii.s:960    .text.main:00000000 main
     /tmp/cc93g7ii.s:1053   .text.main:00000078 $d
                            *COM*:00000004 Task0Handle
                            *COM*:00000004 Task1Handle
     /tmp/cc93g7ii.s:1158   .bss.recv_end_flag:00000000 recv_end_flag
     /tmp/cc93g7ii.s:1152   .bss.aRxBuffer2_Data_Index:00000000 aRxBuffer2_Data_Index
     /tmp/cc93g7ii.s:1101   .bss.aRxBuffer2_Data_flag:00000000 aRxBuffer2_Data_flag
                            *COM*:00000004 aRxBuffer2_Data
                            *COM*:00000001 aRxBuffer3
ARM GAS  /tmp/cc93g7ii.s 			page 35


                            *COM*:00000001 aRxBuffer1
                            *COM*:00000024 RxMessage
                            *COM*:00000028 sFliterConfig
                            *COM*:00000044 hdma_usart2_rx
     /tmp/cc93g7ii.s:1082   .rodata:00000000 $d
     /tmp/cc93g7ii.s:1102   .bss.aRxBuffer2_Data_flag:00000000 $d
     /tmp/cc93g7ii.s:1104   .rodata.str1.4:00000000 $d
     /tmp/cc93g7ii.s:1153   .bss.aRxBuffer2_Data_Index:00000000 $d
     /tmp/cc93g7ii.s:1159   .bss.recv_end_flag:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Receive_IT
HAL_UART_Transmit
osDelay
sprintf
HAL_CAN_Transmit
HAL_UART_Receive_DMA
HAL_IncTick
HAL_CAN_Init
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_Init
osThreadCreate
osKernelStart
